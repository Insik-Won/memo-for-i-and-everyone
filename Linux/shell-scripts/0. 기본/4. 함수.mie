■ 쉘 함수

◎ 참조
  - <link path="https://mug896.github.io/bash-shell/functions.html" contents="Functions"/>

◎ 명령 그룹과 함수
  - { ;}, ( )를 이용해 명령 그룹을 만들면 같은 context(리디렉션, 파이프 등)에서 실행한다. 이는 명령 그룹 전체가 하나의 명령처럼 실행되는 것과 같은 효과가 있다.
  - 명령 그룹에 함수명을 붙여 함수 정의를 하면 일반 명령과 동일하게 사용할 수 있다.
  - { ;}는 현재 쉘에서, ( )은 하위 쉘에서 실행되므로, 보통 함수를 정의할 때 { ;}를 사용하지만 필요하다면 ( )도 사용할 수가 있다.

◎ 함수의 정의
  - 쉘에서 함수를 정의할 때, 프로그래밍 언어에서처럼 매개변수를 적지 않는다. 전달된 인수는 함수 내에서 $1, $2, $3 ...과 같이 특수 변수에 자동으로 할당된다. 위치 매개변수는 함수에서도 사용할 수가 있다.
  - 함수명에서 쉘이 사용하는 메타문자나 따옴표 등은 사용할 수 없다.
  - 외부 명령이나 alias와 동일한 이름을 사용하는 경우 구문 오류가 발생하는데, 앞에 function 키워드를 붙여주면 오류를 방지할 수 있다. (bash에서만)
  - 함수 정의에 리디렉션을 함꼐 정의하거나 { },( ) 없이 바로 단일 명령이나 제어문을 적을 수도 있다.
  - 함수의 선언은 일반적인 변수 선언이나 명령과 똑같다. 그래서 함수를 선언하고나서 함수를 사용할 수 있으며, 조건문이나 반복문으로 함수를 조건/반복해서 선언할 수가 있다.

◎ 함수의 사용
  - 함수는 일반 명령과 동일하게 이름으로 호출한다.
  - 함수의 종료 코드는 return 명령으로 지정한다. 만약 return 명령을 지정하지 않으면 마지막 명령의 종료 코드로 지정된다.
  - 정의한 함수는 하위 쉘에서 그대로 사용할 수 있고, 스크립트 파일을 실행할 때처럼 하위 프로세스에서 사용하려면 export -f 함수명으로 내보내야한다.
  - 함수를 export하면 정의된 함수의 정의 전체가 환경변수 형태로 전달된다. 이는 bash에서만 사용가능하고 sh에서는 사용할 수 없다
  
◎ 함수 관련 명령
  - 정의된 함수 내용 보기: declare -f 함수명
  - 현재 정의된 모든 함수명 보기: declare -F 혹은 compgen -A function
  - 특정 함수 정의되어 있는지 확인: declare -F 함수명 (성공 시 종료코드 0)
  - 정의된 함수 삭제하기: unset -f 함수명

◎ 함수의 변수
  - 함수는 기본적으로 global scope이다. 여기서 global scope는 현재 스크립트 파일이다. (source한 파일 포함)
  - local 명령을 통해 지역변수를 선언할 수 있다. declare 명령은 bash 전용으로 함수 밖에서도 사용할 수 있다.
  - 쉘은 dynamic scoping을 사용할 수 있다. 그래서 1번 함수에게 호출된 2번 함수는 1번 함수의 변수 또한 사용할 수가 있다. 그래서 1번 함수의 변수를 unset할 수도 있다.

◎ 추가
  - 함수 안에서 함수를 정의할 수도 있다. 하지만 이때 내부 함수는 전역으로 선언된다.
