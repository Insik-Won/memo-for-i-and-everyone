■ 리디렉션

◎ 참조
  - <link contents="Redirections" path="https://mug896.github.io/bash-shell/redirections.html"/>

◎ 스트림
  - 스트림은 Unix에서 디스크상의 파일이든 컴퓨터에 연결되는 여러 장치든 모두 통일된 방식으로 다루기 위한 추상화 개념으로 데이터의 입출력, 흐름을 나타낸다.
  - 스트림은 데이터의 물리적/내부적 설정을 신경쓸 필요 없이 자유롭게 장치/프로세스/파일을 연결할 수 있어 프로그래머에게 많은 편리성을 준다.
  - 프로세스는 기본적으로 입출력을 위한 채널을 가지는데 이를 표준 스트림(standard stream)이라고 한다. 여기에는 입력을 위한 stdin, 출력을 위한 stdout, 에러출력을 위한 stderr이 존재한다. 터미널을 열면 쉘 프로세스의 stdin, stdout, stderr이 모두 터미널에 연결되어 사용자로부터 입력을 받고 출력을 한다.
  - Unix에서는 모든 장치를 파일로 관리한다. 표준 스트림도 각각 /dev/stdin, /dev/stdout, /dev/stderr에 파일로 존재한다.
  - Unix에서 파일은 프로그램 실행시 파일지시자(file descriptor, fd)라는 양의 정수 번호로 관리한다. 표준 스트림도 파일지시자로 관리되는데 관례에 따라 stdin은 0번, stdout은 1번, stderr은 2번을 사용한다. 쉘에서도 리디렉션을 할 때 파일지시자 번호를 사용한다.

◎ 기본 사용법과 기본값
  - <code name="예시" type="shell">
    $ cat infile
    hello
    world

    $ wc 0< infile 1> outfile
    $ cat outfile 
     2  2 12
  - </code>
  - 위 wc 명령은 리디렉션의 기본 사용법을 보여준다. 데이터 흐름 방향을 나타내는 리디렉션 기호인 < (입력), > (출력), >> (출력:추가)를 가운데 두고 왼쪽에는 파일지시자 번호를, 오른쪽에는 파일지시자 번호나 파일 이름을 위치하면 된다.
  - 위 wc 명령에서 infile을 FD 0(stdin)에 연결하여 입력으로 사용하였고 FD 1(stdout)을 outfile에 연결해 출력이 outfile 파일에 저장되게 하였다. 리디렉션 기호를 사용할 때 파일 지시자 번호를 적지 않을 경우 표준 스트림이 사용된다. 그래서 < 기호는 입력을 나타내므로 좌측값 0을 기본값으로, >,>>는 출력을 나타내므로 좌측값 1을 기본값으로 한다. 그러므로 위 예제는 다음과 같이 작성하여도 된다.
     - <code>
      $ wc < infile > outfile
      $ cat outfile
       2  2 12
     - </code>
  
  - 리디렉션 기호 좌측값은 공백없이 붙여야한다. 그렇지 않으면 명령의 인수로 인식한다.
  - 리디렉션 기호 우측값을 파일지시자로 할 경우, 파일명으로 인식되지 않게 앞에 &를 붙여야 한다.
  - 리디렉션 표현은 명령행에 어디에 와도 상관 없다. 단 명령 그룹(( ), { ;})과 복합문의 경우 뒤에 와야 한다.
  - 명령치환은 리디렉션보다 먼저 처리되므로 명령치환에서 발생하는 출력을 같은 명령행에서 리디렉션할 수 없다.
  - 리디렉션의 처리순서는 왼쪽에서 오른쪽이다.
  - exec (리디렉션 표현식)을 사용해 현재 쉘의 파일지시자를 리디렉션할 수 있다.
  - 리디렉션 표현식은 좌측값에 우측값에 있던 파일 연결을 이전시키는 역할을 한다. 이때 좌측값이 없다면 새로 생기며, 우측값은 쓸모없어질 경우, -를 붙여 삭제할 수 있다. (예: 3<&-)
  - { ;}은 명령 그룹 외에도 메타문자 우선순위 조절에도 사용된다. 리디렉션 기호도 쉘 메타문자 중 하나로, { ;}를 이용하면 우선순위를 조절할 수 있다. 아래의 경우 제일 바깥쪽 메타문자가 먼저 처리되고 차례로 안쪽에 있는 메타문자가 처리된다.
    - $ {command 2번 ;} 1번

◎ 단축형 메타문자
  - 오류를 표춘 출력으로 출력하고 표준 출력은 파일로 출력하는 경우가 많다. 이때 command >outfile 2>&1 로 표현하는데 bash는 이를 편리하게 사용할 수 있는 단축형 메타문자를 제공한다.
    - comm > outfile 2>&1 -> comm &> outfile
    - comm >> outfile 2>&1 -> comm &>> outfile
    - comm1 2>&1 | comm2 -> comm1 |& comm2

◎ tee 외부 명령
  - tee [options...] [files...]
  - tee 명령은 stdin을 stdout과 인수로 들어온 파일에 출력하는 기능을 한다.
