■ root

◎ 참조
  - <link contents="FHS root" path="https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03.html"
  - 이 글은 FHS 중 root 하위 구조에 대해 설명하는 글이다.

◎ 개요
  - root 구조의 내용은 부팅/복구/수리가 가능해야 한다.
  - root 구조는 다음 디렉토리나 디렉토리의 심볼릭링크를 가져야 한다.
    - [
      - bin: 필수 명령 파일,
      - boot: 부트로더의 정적 파일,
      - dev: 장치 파일 (device),
      - etc: 사용자 고유 시스템 설정 파일,
      - lib: 필수 공유 라이브러리 및 커널 모듈,
      - media: 이동식 매체의 마운트 포인트,
      - mnt: 임시로 마운트할 파일시스템의 마운트 포인트,
      - opt: 추가 응용 소프트웨어 패키지를 설치,
      - run: 실행 중인 프로세스와 관련한 정보,
      - sbin: 필수 시스템 명령 파일,
      - srv: 시스템이 제공하는 서비스를 위한 정보,
      - tmp: 임시 파일,
      - usr: 2차 하위구조,
      - var: varaible 파일 하위구조,
    ]
  - root 구조는 다음 선택 구조를 위해서는 다음 디렉토리나 디렉토리의 심볼릭링크를 가진다.
    - [
      - home: 사용자 홈 디렉토리,
      - lib<qual>: 필수 공유 라이브러리의 대체 버전,
      - root: 루트 사용자의 홈 디렉토리,
    ]

◎ /bin
  - 설명: /bin은 관리자와 사용자, 스크립트가 사용하는 명령을 가진다.
  - 조건: /bin은 하위 디렉토리를 가지면 안되며 아래 명령을 파일/심볼릭 링크로 가지며 다음 선택 명령을 가질 수도 있다.
  - 명령
    - cat: 파일을 표준 출력으로 출력
    - chgrp: 파일의 소유 그룹를 변경
    - chmod: 파일의 접근 권한을 변경
    - chown: 파일의 소유 사용자/그룹을 변경
    - cp: 파일/디렉토리를 복사
    - dd: 파일을 변환하고 복사
    - df: 파일 구조의 디스크 사용량을 출력
    - dmesg: 커널 메세지 버퍼를 제어하거나 출력
    - echo: 한/여러 문자열을 출력
    - false: 아무것도 안하고 실패
    - hostname: 시스템의 호스트 이름을 출력하거나 변경
    - kill: 프로세스에게 시그널 전달
    - ln: 파일 사이의 링크 파일을 생성
    - login: 시스템에서 세션을 시작
    - ls: 디렉토리의 하위 내용을 나열
    - mkdir: 디렉토리를 생성
    - mknod: 블록/문자 특수 파일을 생성
    - more: 텍스트를 페이지로 나누어 출력
    - mount: 파일시스템을 마운트
    - mv: 파일을 옮기거나 이름을 변경
    - ps: 프로세스 상태를 출력
    - pwd: 현재 작업 디렉토리를 출력
    - rm: 파일/디렉토리를 삭제
    - rmdir: 빈 디렉토리를 삭제
    - sed: 'sed' 스트림 편집기
    - sh: POSIX 호환 명령 쉘
    - stty: 터미널 설정을 출력하거나 변경
    - su: 현재 사용자 ID를 변경
    - sync: 파일시스템 버퍼를 flush
    - true: 아무것도 안하고 성공 
    - umount: 마운트한 파일시스템 내리기
    - uname: 시스템 정보를 출력
  - 선택 명령
    - csh: C shell
    - ed: 'ed' 편집기
    - tar: tar 아카이브 명령
    - cpio: cpio 아카이브 명령
    - gzip: GNU 압축 명령
    - gunzip, zcat: GNU 압축 해제 명령
    - netstat: 네트워크 진단 명령
    - ping: ICMP 네트워크 검사 명령
  - /bin/sh는 POSIX 호환 쉘이 아니라면 실제 쉘 명령의 하드/심볼릭 링크여야 한다.
  - [, test 명령은 /bin이나 /usr/bin 구조에 꼭 위치해야 한다.
  - /bin/csh는 /bin/tcsh나 /usr/bin/tcsh의 심볼릭 링크일 수도 있다.

◎ /boot
  - 설명: /boot은 부팅 시간이나 map installer에 필요하지 않은 설정 파일을 제외한 부팅 프로세스에 필요한 모든 파일을 가진다.
    - /boot은 그러므로 커널이 사용자 모드 프로그램을 실행하기 전에 쓰이는 파일을 가지며 master boot section이나 sector map files도 가질 수 있다.
    - 부트로더가 파일을 부팅하기 위해 필요한 파일은 /sbin에 위치한다. 부팅 시간에 필요하지 않은 부트로더 설정 파일은 /etc에 위치한다.
  - 추가
    - 운영체제 커널은 /나 /boot에 위치해야 한다.
    - 시스템 구현 명세 중에 시스템에 의존하는 설정이 /boot에 들어갈 수 있다. 이 조건은 여기에 적히지 않는다. 시스템 구현 명세자가 해당 명세에 필요한 조건을 추가할 수 있게 하기 위함이다.

◎ /dev
  - 설명: /dev는 특수/장치 파일이 위치하는 곳이다.
  - 추가
    - /dev에서 필요한 장치 파일은 수동으로 만들 수 있다. /dev는 필요할 때마다 장치 파일을 만들 수 있는 'MAKEDEV' 명령을 가져야하며 로컬 장치를 만들 수 있는 MAKEDEV.local 명령을 가질 수도 있다.
    - 필요하다면, 'MAKEDEV' 명령어는 시스템에서 사용할 수 있는 장치 파일을 만들 준비가 되어있어야 한다.

◎ /etc
  - 설명: /etc는 설정 파일을 가진다. 
    - 설정 파일(configuration file)은 프로그램의 동작을 제어하는 로컬 파일이다. 해당 파일은 정적이여야 하며 이진 실행파일이 아니여야 한다.
    - 설정 파일은 /etc보다는 /etc의 하위 구조에 두는 것을 추천한다.
  - 조건: /etc와 그 하위 구조는 이진 파일을 가지면 안되며 다음 디렉토리 가져야 하일 다음 선택 디렉토리와 선택 파일을 가질 수도 있다.
  
  - 디렉토리
    - opt: /opt의 설정 파일
  - 선택 디렉토리
    - X11: X Window 시스템의 설정 파일
      - 만약 /usr 구조가 읽기전용으로 마운트되면 이 디렉토리의 로컬 제어를 허용해야한다.
      - /etc/X11은 다음 선택 파일을 가질 수도 있다.
        - xorg.conf: X.org 버전 7 이상의 설정 파일
        - Xmodmap: 전역 X11 키보드 변경 파일
    - sgml: SGML의 설정 파일
      - sgml 시스템의 high-levl 파라미터를 정의하는 일반 설정 파일이 들어간다. *.conf 파일은 일반 설정 파일이며 *.cat 파일은 DTD 관련 중앙 카탈로그 파일로 DTD에 필요한 모든 카탈로그에 광한 참조를 담고 있다. 상위 카탈로그 파일인 catalog는 모든 중앙 카탈로그를 참조한다. 
    - xml: XML의 설정 파일
      -xml 시스템의 high-level 파라미터를 정의하는 일반 설정 파일이 들어간다. *.conf 파일은 일반 설정 파일이며 상위 카탈로그 파일, catalong는 모든 중앙 카탈로그를 참조한다.
      
  - 선택 파일
    - csh.login: C shell 로그인 시 사용하는 시스템 전역 초기화 파일
    - exports: NFS 파일시스템 접근 제어 목록
    - fstab: 파일시스템의 정적 정보
    - ftpusers: FTP 대몬의 사용자 접근 제어 목록
    - gateways: 라우팅 게이트웨이 목록
    - gettydefs: getty가 사용하는 터미널/속도 설정
    - group: 사용자 그룹 파일
    - host.conf: 호스트 경로 resolver 설정 파일
    - hosts: 호스트 이름의 정적 정보
    - hosts.allow: TCP wrapper의 접근 가능한 호스트 목록
    - hosts.deny: TCP wrapper의 접근 불가능한 호스트 목록
    - hosts.equiv: rlogin, rsh, rcp의 신뢰가능한 호스트 목록
    - hosts.lpd: lpd의 신뢰가능한 호스트 목록
    - inetd.conf: inetd의 설정 파일
    - inittab: init의 설정 파일
    - issue: 로그인 전 출력할 메세지
    - ld.so.conf: 공유 라이브러리를 검색할 수 있는 디렉토리 추가 목록
    - motd: 로그인 후 출력할 메세지
    - mtab: 파일시스템의 동적 정보
    - mtools.conf: mtools 설정 파일
    - networks: 네트워크 이름의 정적 정보
    - passwd: 패스워드 파일
    - printcap: lpd의 프린트 가능 프린터 데이터베이스
    - profile: sh 로그인 시 사용하는 시스템 전역 초기화 파일
    - protocols: IP 프로토콜 목록
    - resolv.conf: 호스트 경로 resolver 설정 파일
    - rpc: rpc 프로토콜 목록
    - securetty: 루트 로그인 tty 접근 제어 파일 
    - services: 네트워크 서비스의 포트 이름
    - shells: 로그인 가능한 쉘의 경로 목록
    - syslog.conf: syslogd 설정 파일

◎ /home
  - 설명: /home은 상당히 표준화되어 있지만, 실제 표준은 아닌 디렉토리이다. 이 디렉토리의 구성은 사용자마다 다르며, 그러므로 어떤 정의도 이 구조에 내릴 수 없다.
  - 조건: 응용 프로그램의 사용자 정의 설정 파일 이름은 '.'로 시작한다. ("dot file") 만약 설정 파일을 두개 이상 만들고 싶다면 '.'로 시작하는 디렉토리에 위치시키며 그 내부 파일은 '.'로 시작해선 안된다.
  - 추가
    - home 구조를 표준화하기 위한 여러 시도가 있어왔다. XDG Base Directory specification과 GLib convention이 대표적인 예이다. 

◎ /lib 
  - 설명: /lib은 시스템을 부팅하고 root 파일시스템의 명령을 돌리기 위해 필요한 명령이 들어간다.
  - 조건: 적어도 다음 파일이름 패턴 중 하나는 존재해야 하며 다음 선택 디렉토리가 있을 수도 있다.
    - 패턴
      - libc.so.*: 동적 링킹 C 라이브러리
      - ld*: 실행 시간 링커/로더
    - 선택 디렉토리
      - modules: 불러오기 가능한 커널 모듈

◎ /lib<qual> 
  - 설명: /lib 구조의 라이브러리를 대체할 수 있는 다른 버전의 라이브러리가 들어간다. 대표적인 예로 /lib32와 /lib64가 있다.
  - 조건: /lib 구조와 조건이 동일하다.

◎ /media 
  - 설명: /media는 플로피디스크, CD-ROM, ZIP디스크 등의 이동식 매체를 마운트하는 디렉토리이다.
  - 조건: 다음 선택 디렉토리가 있을 수 있다. 또한 아래 디렉토리의 이름 끝에 0으로 시작하는 한자리 숫자가 추가될 수도 있다.
    - floppy: 플로피디스크
    - cdrom: CD-ROM
    - cdrecorder: CD writer
    - zip: ZIP 드라이브

◎ /mnt 
  - 설명: /mnt는 관리자가 임시로 파일시스템을 마운트하는 디렉토리이다. 그러므로 어떤 정의도 이 구조에 내릴 수 없다. 이 디렉토리는 설치 과정에서 사용되면 안된다.

◎ /opt 
  - 설명: /opt는 추가 응용 소프트웨어 패키지를 설치하기 위한 디렉토리이다.
  - 조건:
    - /opt에 설치하는 패키지의 정적 파일은 반드시 /opt/<pakage>나 /opt/<provider> 디렉토리에 위치해야 한다. <package>는 패키지를 나타내는 이름이고 <provider>는 패키지 제공자의 LANANA 등록 이름이다.
    - 사용자가 실행할 프로그램은 반드시 /opt/<package>/bin이나 /opt/<provider> 구조 안에 있어야 한다. 만약 패키지가 Unix manual 페이지를 제공한다면, 그 파일은 /opt/<package>/share/man이나 /opt/<provider> 구조 안에 있어야 하며 /usr/share/man과 똑같은 구조를 사용해야 한다.
  - 추가
    - /opt/bin, /opt/doc, /opt/include, /opt/info, /opt/lib, /opt/man은 로컬 관리자를 위해 남겨둔 디렉토리이다. 이 디렉토리에 관리자는 사용자와 소통할 목적의 파일을 복사하거나 링크해둘 수 있지만 이 디렉토리들이 없어도 작동은 할 것이다.
    - 패키지의 동적 파일은 /var/opt 파일에 설치되어야 한다. var 문서에서 자세한 내용을 확인할 수 있다.
    - 사용자 관련 설정 파일은 /etc/opt 파일에 설치되어야 한다. etc 구조에서 자세한 내용을 확인할 수 있다.
    - 패키지 파일은 절대 /opt, /var/opt, /etc/opt 구조 외에 있어선 안된다. 하지만 해당 위치에 있어야 제대로 동작할 수 있는 패키지 파일은 제외한다. (장치 lock 파일은 /var/lock에 있어야 하고 장치 파일은 /dev 파일에 있어야 한다.)
    - 배포 시스템은 미리 등록한 하위 디렉토리에서 소프트웨어를 설치하거나 관리해야 한다.

◎ /root 
  - 설명: root 계정의 홈 디렉토리는 개발자나 로컬에 따라 갈리지만 /root는 기본적으로 추천되는 홈 디렉토리이다.

◎ /run 
  - 설명: /run은 부팅 이후 시스템 정보를 제공한다.
    - /run은 부팅 프로세스를 시작할 떄 하위 파일을 모두 삭제한다.
    - /run 이전에는 /var/run이 사용되었으므로 호환성을 위해 프로그램 중에 /var/run을 사용하는 프로그램이 있을 수도 있다.
    - /run은 만약 프로그램이 둘 이상의 런타임 파일을 가진다면 디렉토리를 가질 수도 있다. 사용자도 디렉토리를 만들 수 있지만 잘못된 사용을 막기 위해 접근권한 설정에 주의를 기울여야 한다.
      - /run은 권한이 없는 사용자가 쓰기 가능해선 안된다. 쓰기 가능하다면 치명적인 보안 문제로 이어질 수 있다.
  - 조건:
    - PID 파일은 /run에 위치해야 한다. PID 파일의 작명 관습은 <program-name>.pid이다.
    - PID 파일의 내부 형식은 바뀌지 않은 상태이다. 파일은 반드시 ASCII 문자로 이루어진 숫자여야 하며 항상 마지막에 개행 문자를 붙여야 한다.
    - PID 파일을 읽는 프로그램은 다소 유연해야 한다. 공백이나 0, 개행 문자가 추가로 있는 경우, 무시해야 한다.
    - PID 파일을 생성하는 프로그램은 PID 파일 내부 형식을 사용해야 한다.
    - Unix 임시 소켓을 관리하는 시스템 프로그램은 반드시 그 소켓을 /run 구조에 두어야 한다.

◎ /sbin 
  - 설명: /sbin, /usr/sbin, /usr/local/sbin은 시스템 관리 명령, root 전용 명령을 담는 디렉토리이다.
    - /sbin은 /bin을 포함해 부팅/복구/백업/수리에 사용하는 필수 이진 실행 파일이 들어간다.
    - /usr/sbin은 /usr 구조가 마운트된 이후에 실행되는 실행 파일이 보통 들어간다.
    - /usr/local/sbin은 관리자가 추가로 사용할 프로그램이 설치된다.
  - 조건: /sbin은 디렉토리를 가져선 안되고 다음 명령을 가져야 하며 다음 선택 명령을 가질 수도 있다.
    - 명령
      - shutdown: 시스템을 다운
    - 조건 명령
      - fastboot: 디스크 검사 없이 시스템을 재부팅
      - fasthalt: 디스크 검사 없이 시스템을 중지
      - fdisk: 파티션 테이블 조작 
      - fsck.*: 특정 파일 시스템의 검사 및 수리 
      - getty: getty 프로그램
      - halt: 시스템을 중지
      - ifconfig: 네트워크 인터페이스 설정
      - init: init 프로세스
      - mkfs: 파일 시스템을 생성
      - mkfs.*: 특정 파일 시스템을 생성
      - mkswap: swap area를 생성
      - reboot: 시스템을 재부팅
      - route: IP 라우팅 테이블 관련
      - swapon: paging과 swapping 허용
      - swapoff: pagin과 swapping 비허용
      - update: 파일시스템 버퍼를 주기적으로 flush하는 대몬

◎ /srv 
  - 설명: /srv는 시스템이 제공하는 site-specific 데이터를 가진다.
  - 추가
    - /srv를 정의하는 목적은 사용자가 해당 서비스의 데이터 파일을 찾게 하고 서비스가 필요로 하는 읽기전용 데이터와 수정가능한 데이터, 스크립트를 위치시키기 위함이다.
    - 사용자 관련 파일은 해당 사용자의 홈 디렉토리에 들어가야 하고 소비자에게 노출하고 싶지 않은 디렉토리와 파일구조는 /var/lib에 들어가야 한다.
    - /srv의 하위 디렉토리를 이름 짓는 방법은 아직 규정되지 않았다. 한 방법은 한 디렉토리 안에 프로토콜별로 ftp, rsync, www, csv 디렉토리를 두는 것으로 큰 파일 구조를 사용하는 관리자 입장에서는 꽤 유용하다. (/srv/physics/www, /srv/compsci/cvs) 하지만 이런 구조는 사용자마다 다르기 때문에 프로그램은 특정 작명 방법이나 위치 방법을 따르는 구조에 의존하지 말아야 한다.
    - 배포 시스템은 관리자 허가 없이 /srv의 하위 파일을 삭제하지 않도록 주의를 기울여야 한다.

◎ /tmp 
  - 설명: /tmp는 임시 파일을 만들어야 하는 프로그램이 사용할 수 있는 디렉토리이다.
    - 프로그램은 /tmp에 파일이 남아있으리란 가정을 해선 안된다.
  