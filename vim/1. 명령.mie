■ 1. 명령

◎ 개념
  - word와 WORD
    - word는 단어가 아닌 문자(키워드, 공백문자)로 구분한다.
    - WORD는 공백문자가 아닌 문자로 구분한다.
  - 정방향과 역방향
    - 정방향은 커서의 다음 문자열로 향한다.
    - 역방향은 커서의 이전 문자열로 향한다.
  - 정규표현식
    - 정규표현식은 문자열을 검색하는 데 사용하는 데 사용하는 언어이다.
    - 정규표현식은 문자열만 사용하면 해당 문자열을 검색한다.
    - 정규표현식에서 특수문자는 대개 특별한 의미를 가지고 있어, 앞에 '\'를 넣어야 그 문자를 사용할 수 있다.
    - 정규표현식을 제대로 활용하려면 추가적인 공부가 필요하다.
  - 준말
    - char: 문자 하나
    - number: 숫자
    - str: 문자열
    - pattern: 정규표현식
    - move: 이동 명령
  - 옵션
    - :set {option}을 통해 옵션을 활성화할 수 있다. (인자를 필요로 하는 경우도 있다.)
    - :set no{option}을 통해 논리값(True, False) 옵션을 비활성화할 수 있다.
    - :set {option}?을 통해 옵션의 값을 확인할 수 있다.
    - :set {option}&을 통해 옵션의 값을 리셋할 수 있다.
    - vimrc 파일로 영구적인 옵션을 지정할 수 있다. 디폴트 경로는 각 운영체제마다 정해져있다. (리눅스는 ~/.vimrc)
  - 도움말
    - :help를 통해 매뉴얼을 열 수 있다.
    - :help {subject}를 통해 해당 주제에 관한 매뉴얼을 열 수 있다.
    - 이 매뉴얼은 Vim으로 열린다. CTRL-T는 처음으로 복귀, CTRL-]는 커서가 위치한 주제로 이동, CTRL-O는 이전 위치로 돌아간다.

◎ 이동 명령
  - h,j,k,l: 좌,상,하,우로 움직인다.
  - -/+: 이전/다음 줄 앞으로 이동한다.
  
  - 0/$: 줄의 맨 앞/뒤로 움직인다.
  - ^/_: 공백을 포함하지 않는 줄의 첫 글자로 이동한다. ^는 문자 단위, _는 줄 단위 명령이다. 숫자와 함꼐 입력해보면 차이를 알 수 있다.
  - g_: 공백을 포함하지 않는 줄의 마지막 글자로 이동한다. 줄 단위 명령이다.
  - gg/G: 문서의 맨 앞/뒤로 이동한다.
  - {num}G: 해당 번호의 줄로 이동한다.

  - w/W: 다음 word/WORDS의 첫 글자로 이동한다.
  - b/B: 이전 word/WORDS의 첫 글자로 이동한다.
  - e/E: 다음 word/WORDS의 끝 글자로 이동한다.
  - ge/gE: 이전 word/WORDS의 끝 글자로 이동한다.
  
  - H/M/L: 문서의 상단/중단/하단으로 이동한다. (High/Mid/Low)
  - CTRL-E/Y: 현재 창을 한줄 올린다/내린다.
  - CTRL-U/D: 현재 창을 반페이지 올린다/내린다. (Up/Down)
  - CTRL-B/F:: 현재 창을 한페이지 올린다/내린다.. (Back/Forward)
  - zt/zz/zb: 커서가 있는 줄을 현재 창의 상단/중단/하단으로 위치시킨다. (top/x/bottom)
    - 만약 항상 커서 주변으로 여분의 줄을 남기고 싶다면 scrolloff 옵션을 사용한다.

  - f/t{char}: 해당 문자와 일치하는 문자를 정방향/역방향으로 찾아 이동한다.
  - F/T{char}: 해당 문자와 일치하는 문자를 정방향/역방향으로 찾아 그 앞까지만 이동한다.
  - /{pattern}, ?{pattern}: 해당 정규식과 일치하는 문자열을 정방향/역방향으로 찾는다.
  - n: 마지막 /,? 명령을 반복한다.
  - N: 마지막 /,? 명령을 방향을 뒤집어 반복한다.
  - ;: 마지막 f/t/F/T 명령을 반복한다.
  - ,: 마지막 f/t/F/T 명령을 방향을 뒤집어 반복한다.

  - %: 괄호짝을 찾아 이동한다. 괄호는 matchpairs 설정으로 정한다.
  - (/): 문장의 앞/뒤로 이동한다. (문장은 구두점으로 끝난다.)
  - {/}: 이전/다음 빈줄을 찾아 이동한다.
  - ]]/][: 다음 '{', '}'를 찾아 이동한다.
  - []/[[: 이전 '{, '}'를 찾아 이동한다.  

◎ 행동 명령
  - <ESC>: 일반 모드로 전환
  - ':': 명령줄 모드로 전환

  - i/a: 커서 앞/뒤에서 삽입 모드 전환
  - I/A: 줄의 처음/마지막으로 이동 후, 삽입 모드 전환
  - o/O: 줄의 다음/이전 줄로 이동 후, 삽입 모드 전환
  - s/S: 문자/줄을 지운 다음 삽입 모드 전환
  - R: 교체 모드 전환 (삽입 모드랑 비슷하나 기존 문자를 덮어씀)

  - v: 비쥬얼 모드 전환
  - V: 비쥬얼 라인 모드 전환
  - CTRL-V: 비쥬얼 블록 모드 전환

  - p/P: 커서 다음/이전으로 붙여넣기
  - u/CTRL-R: undo/redo 하기
  - U: 해당 줄의 명령을 취소하기

  - r{char}: 문자를 해당 문자로 교체 
  - x/X: 커서 다음/이전 문자 삭제
  - ~: 문자의 대소문자를 교체한다.
  - J: 줄과 다음 줄을 합치기 (줄 사이의 모든 공백 문자를 띄워쓰기 하나로 바꾼다)
  - gJ: 줄과 다음 줄을 합치기 (줄 사이의 개행문자만 삭제한다)

◎ 연산 명령
  - d: 이동 범위의 문자를 삭제한다.
  - c: 이동 범위의 문자를 삭제하고 삽입 모드로 전환한다.
  - y: 이동 범위의 문자를 복사한다.
  - </>: 이동 범위의 줄을 내어쓰기/들여쓰기 한다.
  - gu/gU/g~: 이동 범위의 문자를 소문자/대문자/대소문자 교체한다.

  - D,C,Y: 이동 범위를 커서부터 줄 끝까지로 한 뒤, 소문자 연산 명령을 적용한다.
  - 연산 명령어를 두번 치면 해당 줄에 연산을 적용한다. (dd, cc, yy, gugu -> guu)
  - 삭제 연산은 복사 연산도 포함하는 연산이다.
  
◎ 명령행 명령
  - :quit, :q: 나가기
  - :write, :w: 저장하기
    - :q!: 저장하지 않고 나가기
    - :wq: 저장하고 나가기
    - :qa, :wa: 모든 탭을 나가기/저장하기

  - :{range}substitute/from/to/{flags}: range만큼의 범위에서 from을 to로 바꾼다.
    - substitute를 줄여 s를 써도 된다.
    - / 대신 다른 문자를 써도 된다.
    - from과 to는 정규표현식이다. to에는 \{숫자}가 첫번째 정규식 매칭을 의미한다.
    - range
      - 없음: 현재 줄을 범위로 한다.
      - %: 모든 줄을 범위로 한다.
      - 숫자: 해당 번호의 줄을 범위로 한다.
      - 범위1,범위2: 해당 번호 사이의 줄을 범위로 한다.
        - 범위1과 범위2는 다음 요소 중 하나가 들어갈 수 있다.
        - 숫자: 해당 번호의 줄을 나타낸다.
        - ./$: 현재 줄/문서의 마지막 줄을 의미한다.
        - `{mark}: 마크를 의미한다.
        - (./$)(+/-){number}: 오프셋을 의미한다. (.+5는 현재 줄에서 5줄 뒤, $-3은 맨 끝 줄에서 3줄 앞)
        - /{regex}/, ?{regex}?: 정방향, 역방향 검색의 이동 범위를 의미한다.
    - flags
      - 없음: 상응하는 첫 문자열만 교체한다.
      - g: 상응하는 모든 문자열을 한번에 교체한다.
      - c: 사용자의 입력에 따라 교체할지 말지 정한다.
        - y: 교체하기
        - n: 교체하지 않고 넘어가기
        - a: 나머지를 모두 교체하고 끝낸다.
        - q: 끝낸다.
        - I: 이것만 교체하고 끝낸다.
        - CTRL-E: 스크롤을 한줄 올린다.
        - CTRL-Y: 스크롤을 한줄 내린다.
      - e: 교체할 문자열을 찾지 않아도 오류로 취급하지 않는다.
  - !{range}{command}: range 만큼의 범위를 외부 명령(쉘 명령) command의 입출력으로 리디렉션한다.
  - :{range}global/{pattern}/command: range만큼의 범위에서 pattern이랑 매칭되는 문자열에 외부 명령(쉘 명령) command를 적용한다.
  - :{range} read {filename}: filename 파일을 열어 range 범위를 읽고 현재 파일에 쓴다.
  - :{range} write {filename}: filename 파일을 열어 현재 파일의 range 범위만큼 새로 쓴다.
    - 이미 존재하는 파일일 경우 write 다음에 !를 쓴다.
    - 만약 파일의 끝에 붙여쓰고 싶다면 write 다음에 >>를 붙일 수 있다.
  - read와 write 명령에서 {filename}을 !{command}로 바꾼다면 해당 외부 명령(쉘)의 출력/입력으로 대체할 수 있다.
  - range는 모두 substitue와 공유한다. 기본값은 파일 전체이다.
