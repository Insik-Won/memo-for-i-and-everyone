■ 하위 쉘

◎ 참조
  - <link contents="Subshells" path="https://mug896.github.io/bash-shell/subshells.html"/>

◎ 개요
  - 쉘에서 명령을 실행하면 새로운 프로세스가 생성되어 실행된다. 명령을 호출한 쪽이 부모 프로세스가 되고 새로 생성한 명령은 자식 프로세스가 된다.
  - 스크립트를 실행하거나 ( ), $( ), ``, |, &를 이용한 명령은 새로 만든 쉘로 명령을 실행하는데, 이때 생성한 쉘을 자식 쉘, 하위 쉘이라고 한다.

◎ 자식 프로세스가 부모로부터 상속받는 것
  - 현재 작업 디렉토리
  - export된 환경변수와 함수
  - 현재 설정된 파일 지시자와 표준 스트림
  - ignore된 신호 (trap " INT)

◎ 자식 쉘이 부모 쉘로부터 상속받는 것
  - 자식 프로세스가 부모로부터 상속받는 것
  - export 안된 변수, 함수
  - 현재 쉘의 PID를 나타내는 $$ 변수값
  - 부모 프로세스의 PID를 나타내는 $PPID 변수값
  - trap handler 설정 (trap 'rm -f tmpfile' INT)

◎ 부모와 자식 프로세스의 관계
  - 부모 프로세스에서 상속받은 값은 자식이 마음대로 읽고 쓸 수 있으나 부모에게 적용되진 않는다. 또한 자식 프로세스가 쉘 환경변수를 설정하거나 옵션 설정을 해도 부모에게 영향을 미치지 않는다.
  - 부모 프로세스에서 특정 값이 변경되어도 이미 실행 중인 자식 프로세스에는 반영되지 않는다.
  - 자식 프로세스에서 export할 경우 또 자식에게만 적용이 되고 부모를 비롯한 다른 프로세스에게 적용되지 않는다.

◎ 자식 쉘의 특징 및 활용
  - 부모 프로세스에서 설정한 변수나 함수는 export 해야 자식 프로세스에서 사용할 수 있다. 하지만 자식 쉘에게는 export하지 않아도 사용할 수 있다.
  - 현재 쉘에서 사용중인 변수는 자식 쉘에서 읽고 쓸 수 있으나 변경된 값이 현재 쉘에 적용되지는 않는다.
  - 자식 쉘에서 cd한 것은 부모 쉘에게 영향을 주지 않으며 exit 명령을 사용해 종료할 수 있다.
  - 디버깅을 위해 -E | set -o errtrace, -T | set -o functrace 옵션을 이용해 trace할 때도 자식 쉘까지만 되고 자식 프로세스는 trace되지 않는다.

◎ $$와 $BASHPID
  - $$ 변수는 현재 쉘 PID를 나타내는 변수로 자식 쉘도 동일한 값을 가진다. 하지만 자식 쉘도 엄연히 프로세스이므로 PID 값을 가지고 $BASHPID 변수를 통해 구할 수 있다.

◎ $SHLVL과 $BASH_SUBSHELL
  - $SHLVL은 자식 프로세스의 깊이를, $BASH_SUBSHELL은 자식 쉘의 깊이를 의미한다.
