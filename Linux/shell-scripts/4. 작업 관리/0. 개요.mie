■ 작업 관리 개요

◎ 참조
  - <link contets="Job Control" path="https://mug896.github.io/bash-shell/job_control.html"/>

◎ 개요
  - 터미널에서는 단순히 한번에 하나의 명령만 실행시킬 수 있는 것이 아닌 & 메타문자를 이용해 백그라운드 작업을 생성해 멀티태스킹을 수행할 수 있다. 
  - &를 이용해 명령을 실행하면 부모 프로세스는 자식 프로세스가 종료될 때까지 기다리지 않고 바로 다음 작업을 할 수 있게 된다.
  - 가령 인터넷에서 파일을 다운로드하는 작업을 백그라운드로 실행시켜놓고 vi 편집기로 파일을 수정할 수 있다.

◎ Job id와 Job specification
  - <code name="예시" type="shell">
    $ curl -sO http://cdimage.ubuntu.com/.../ubuntu-mate-15.10-desktop-amd64.iso &
    [3] 26558
  - </code>
  - 명령을 & 메타문자를 이용해 백그라운드로 실행하면 결과로 job id와 process id를 보여준다. 위 예에서 [3]은 job id에 해당하고 26558은 pid에 해당한다.
  - 작업 관리 명령(kill,jobs,bf,fg,wait,disown,kill)은 job id와 pid를 구분한다. job id는 jobspec이라 부르며 job id 앞에 % 문자를 붙여 만든다.
  - pid는 개별 프로세스를 나타내고 jobspec은 파이프로 연결된 프로세스와 자식 프로세스 모두, 즉 명령 그룹을 나타낸다.

◎ 작업 관리 명령어
  - jobs
    - jobs [-lnprs] [jobspec ...]
    - jobs -x command [args]
    - 현재 job table 목록을 보여준다. -l 옵션을 주면 pid도 보여주고 -p 옵션을 주면 pid만 보여주며, 파이프로 연결된 명령 그룹의 경우 첫번째 pid만 표시한다.
    - 출력 결과에서 job id 옆에 보이는 +,-기호는 jobspec에 사용되며, %+는 current job, 즉 가장 마지막 작업을 보여주며 %-는 previous job, 즉 current job의 이전 작업을 나타낸다.
      - fg 명령을 사용해 이동하면 +,-위치가 바뀐다.

  - fg
    - fg [jobspec]
    - 현재 백그라운드에 stopped, 또는 running 상태에 있는 작업을 포어그라운드로 실행하고 current job으로 만든다.
    - 인수를 주지 않으면 current job이 사용된다.

  - bg
    - bg [jobspec]
    - 현재 stopped 상태에 있는 백그라운드 작업을 SIGCONT 신호를 보내 running 상태로 만든다.
    - 인수를 주지 않으면 current job이 사용된다.
    
  - suspend
    - suspend [-f]
    - suspend 명령을 실행하는 쉘은 SIGCONT 신호를 받기 전까지 중단한다.
    - login shell에서는 사용할 수 없으나 -f 옵션을 이용하면 override할 수 있다.

  - disown
    - disown [-h] [-ar] [jobspec ...]
    - disown은 해당 작업의 소유를 포기한다. 작업이 종료되는 것은 아니고 job table 목록에 삭제되어 더이상 작업을 제어할 수 없게 된다.
    - 터미널을 종료시키거나 쉘에서 exit할 때 SIGHUP 시그널에 의해 작업이 종료되는 것을 방지할수 있다. (shopt -s huponexit 옵션이 설정되있을 경우)
    - -h 옵션도 동일한 역할을 하지만 job table에 계속 남게해 작업을 제어할 수 있다.

  - wait
    - wait [-n] [jobspec|pid ...]
    - 백그라운드로 실행한 작업을 종료할 때까지 기다리고, 종료하면 해당 작업의 종료 상태를 반환한다.
    - 인수 없이 실행하면 모든 프로세스를 기다리고 종료 상태로 true를 반환한다.
    - 파이프로 연결한 명령 그룹은 마지막 명령의 pid가 그룹의 pid가 되며, 전체 파이프가 종료할 떄까지 wait한다.
    - $!은 가장 마지막에 백그라운드로 실행한 pid를 나타낸다. wait $!은 자식 프로세스가 끝날 떄까지 기다리는 용도로 사용한다.

◎ 작업 관리 키
  - CTRL-C
    - 인터럽트 신호(SIGINT)를 포어그라운드 작업에 보내 종료시킨다.
  - CTRL-Z
    - suspend 신호(SIGTSTP)을 포어그라운드 작업에 보내 suspend하고 백그라운드에 있던 쉘 명령줄 프로세스를 포어그라운드로 이전한다.

◎ 입력과 출력
  - 입력은 포어그라운드 작업에서만 받을 수 있다. 백그라운드 작업에서 입력을 받게되면 포어그라운드 작업이 SIGTTIN 신호가 전달되어 suspend된다.
  - 출력은 현재 session에서 실행되고 있는 모든 작업이 공유한다. 그래서 백그라운드 작업을 실행할 때 제대로 redirection 처리를 하지 않으면 터미널로 출력되는 메세지가 서로 섞이게 된다.
    - stty tostop 명령을 사용하면 백그라운드 작업에서 출력이 발생할 시 SIGTTOU 신호를 발생시켜 suspend시킬 수 있다.

◎ 백그라운드 작업
  - 백그라운드 작업은 하위 쉘에서 실행한다. 만약 하위쉘에서 백그라운드 작업을 실행하면 현재 쉘의 job table에 등록되지 않는다.
  - &&, ||, | 앞에는 & 연산자를 바로 사용할 수 없고 명령 그룹을 사용해야 한다. 이때 해당 그룹의 종료상태 값은 항상 true이다.
  - 명령 치환에서 백그라운드 작업을 실행하면 명령 치환 파이프가 명령의 stdout과 연결되어 해당 명령이 종료할 때까지 대입 연산이 완료되지 않는다.
    - stdout을 다른 곳으로 연결하면 대입 연산이 바로 완료된다.
  - 백그라운드 작업은 실행 중에 터미널로부터 read할 수 없다. 실제로 stdin은 /dev/null로 연결된다.
  - 스크립트 파일에서 백그라운드 작업을 실행하면 job table에 등록되지 않고 stdin은 /dev/null로 바뀐다. 
    - 부모 프로세스에 해당하는 스크립트 파일이 먼저 종료하면 PPID가 init으로 바꾸이 실행을 지속해서 데몬 프로세스를 만드는 방법으로도 사용된다.
  - 스크립트 파일에서 작업 관리 명령어가 기본적으로 disable된다.
    - bg, fg, suspend 명령을 사용할 수 없고 jobs, wait, disown 명령을 사용할 수 있다. 필요에 따라 set -o monitor 옵션을 설정해 활성화할 수도 있다.
  - 쉘이 종료할 경우 백그라운드 작업은 상태별로 다음 동작을 한다.
    - 프롬프르 상태에서 exit/logout할 경우
      - stopped 상태: 쉘에서 stopped 작업의 목록을 알려준다. 다시 exit/logout을 반복하면 해당 stopped 작업도 함께 종료한다.
      - running 상태: PPID가 1번(init)으로 바뀌고 백그라운드로 실행을 계속 한다.
