■ 메타문자와 키워드

◎ 참조
  - <link path="https://mug896.github.io/bash-shell/metacharacters.html" contents="Shell Metacharacters"/>

◎ 쉘 메타문자
  - 쉘 스크립트는 메타문자를 제공한다. 이 메타문자는 명령문 상에서 특별한 기능을 하므로 문자 그대로 쓰고 싶다면 이스케이프하거나 따옴표를 사용해야 한다.
  - 메타문자 목록
    - <code>
      ( )   `   |   &   ;
      &&  ||              # AND, OR 문자
      <   >   >>          # redirection 문자
      *   ?   [ ]         # glob 문자
      "   '               # quote 문자
      \   $
      =   +=              # 대입연산
    - </code>

◎ 메타문자들
  - ( )
    - 하위쉘을 생성하거나 명령 그루핑, 우선순위 조절에 사용한다.
    - 프로그래밍 언어에서처럼 공백이나 ';'에 대한 제약 없이 자유롭게 사용할 수 있다.
  - `
    - 백틱 문자는 $( )와 함께 명령 치환에 사용된다.
  - &&, ||
    - AND, OR 논리 메타문자. 둘다 우선순위가 같다.
    - [[ ]] 특수 명령에서 제공하는 연산자와는 다르다.
  - &
    - 명령을 백그라운드로 실행할 떄 사용한다.
    - ';'와 동일하게 명령문의 종료를 나타낸다. 그래서 붙여쓰면 안된다.
  - |
    - 명령을 파이프로 연결할 때 사용한다. (그룹을 만든다.)
    - |&는 stdout, stderr 둘다 파이프로 전달하며 2>&1 |와 동일한 의미이다.
  - <, >, >>, ...
    - 리다이렉션과 관련된 메타문자이다.
    - >>(append), >&, <>, &>, >>, >|(override noclobber), <<(here document), <<-(no leading tab), <<< (here string)
  - ;
    - 한 줄에 여러개의 명령을 연이어 작성할 때, 분리를 위해 사용한다.
    - ;;, ;&, ;;&는 case문에서 각 pattern)의 종료를 나타내는데 사용한다.
  - *, ?, []
    - 패턴매칭에 사용하는 glob 문자도 메타문자에 속한다.
  - ", '
    - 문장을 따옴표로 감쌀 때 사용한다.
    - 공백으로 분리된 문장을 따옴표로 감싸면 하나의 인수가 된다.
  - \
    - 이스케이프할 때 사용하는 문자이다.
  - $
    - 매개변수 확장, 산술확장, 명령 치환에 사용된다.
  - =, +=
    - 대입연산에 사용한다. +=는 bash 3.1에 추가된 기능으로 sh에서는 사용할 수 없다.

◎ 일부 키워드
  - { }는 메타문자가 아니라 키워드로 명령 그룹, 함수 정의, 매개변수 확장, brace 확장에 사용된다.
  - !도 키워드로 쉘에서 두가지 기능을 가지고 있다.
    - 공백과 함께 사용하면 논리적 부정으로 해당 명령어의 종료 코드를 반전시키고, 공백 없이 프롬프트에서 붙여서 사용하면 명령 history 확장 관련 동작을 한다.

◎ 우선순위
  - &&와 ||는 보통 프로그래밍 언어와 달리 우선순위를 같다. 
  - &&, ||보다 !가 더 우선순위가 높다.
  - !보다 파이프가 우선순위가 높다. 파이프는 그룹을 만들어 하나의 명령처럼 실행하기 때문이다.
  - 파이프보다 리다이렉션이 우선순위가 높다. 
  - 리다이렉션보다 &(백그라운드)이 우선순위가 높다. ';'와 같은 역할을 하기 때문이다.
  - 다른 메타문자보다 ( ), { ;}가 우선순위가 가장 높다. ( )는 하위 쉘을 만들며 현재 쉘과 분리되며 { ;}는 그렇지 않다. 

◎ 추가
  - 메타문자는 쉘에서 특별히 취급하는 문자이기에 다른 단어와 공백 없이 붙여서 사용할 수 있다.
  - &&로 명령을 연결할 경우 이전 명령이 정상적으로 완료된 것을 보장할 수 있다. 중간에 하나라도 명령이 비정상 종료될 경우, 나머지 명령은 실행되지 않게 된다.
  - 쉘에서 ',' 연산자는 존재하지 않는다. 그래서 기본적으로 명령의 인수나 배열 원소, in 키워드로 받을 단어를 구분하기 위해 사용하는 공백을 써야 한다.
