■ 쉘 변수와 매개변수, 함수

◎ 참조
  - <link path="https://mug896.github.io/bash-shell/variables.html" contents="Variables"/>

◎ 변수
  - 쉘 스크립트 변수 이름은 알파벳(대소문자), 숫자, _로 만들 수 있으며, 이름의 첫 문자로 숫자가 올 수 없다.
  - 변수 이름을 대문자로 사용할 떄는, 쉘 환경변수와 중복되지 않도록 주의해야 한다.

  - 변수를 생성할 때는 "변수명=변수값"을 붙여써야 한다. 만약 사이에 공백이 들어가면 명령문으로 인식한다.
  - 변수는 동일한 라인에 여러개를 설정할 수 있다. 하지만 local, declare, export 명령에서는 적용할 수 없다.
  - 변수 대입 연산에서 변수 이름에 변수를 사용할 순 없지만, eval, let, declare, local, export를 사용하면 변수 이름에 변수의 값을 넣을 수가 있다.
  - 변수의 값으로 NUL 문자를 저장할 순 없지만 pipe나 file로 저장할 순 있다.

  - 생성한 변수는 하위 쉘과 source한 스크립트에서 별다른 설정 없이 사용할 수 있고, 하위 프로세스에서 사용하려면 exprot해야 한다.
    - export 변수명으로 내보내고 export -n 변수명으로 내보내기를 취소한다.
  - 명령, 함수, alias로 사용되는 이름과 변수는 각기 다른 이름공간을 사용하므로 서로 동일한 이름을 변수로 사용할 수 있다.
  - 명령행에서 명령문 외에 대입연산도 올 수가 있다. 그래서 &&와 ||와 연계해 사용할 수가 있다.
  - 쉘에 정의된 모든 변수명을 볼려면 compgen -A variable 혹은 declare -p 명령을 사용할 수 있다.
  - 정의한 변수/함수를 삭제하려면 unset 명령어를 사용할 수 있다. 변수만 삭제하려면 -v 옵션을 준다.

◎ 변수의 상태
  - 쉘에서 변수의 상태는 3가지로 구분할 수 있다.
    - 1. 변수가 존재하지 않는 상태: 변수에 값을 한번도 대입하지 않은 상태를 뜻한다. unset의 경우도 포함한다.
    - 2. null 값인 상태: 변수가 존재하고 null(비어있는 문자열)을 값으로 갖고 있는 상태를 뜻한다.
    - 3. null 이외의 값을 가진 상태: 변수가 존재하고 null이 아닌 값을 갖고 있는 상태를 뜻한다.

  - 1,2번 상태와 3번 상태는 다음 명령어로 구분한다.
    - test -z "${변수}": 변수가 1,2번 상태일 때 참 (종료코드 0)
    - test -n "${변수}": 변수가 3번 상태일 때 참 (종료코드 0)
  - 1번 상태와 2,3번 상태는 다음 명령어로 구분한다.
    - text -v "${변수}": 변수가 1번 상태일 때 참 (종료코드 0)
  
  - sh에서는 -v 옵션을 사용할 수 없다. 하지만 매개변수 확장 기능을 활용하거나 set -u 옵션을 활용하여 테스트할 수 있다. 
    - (set -u; echo "${변수}"): 변수가 존재하지 않으면 오류를 반환하고 종료 (()를 사용해 서브쉘에서 실행한다.)

◎ bash 전용
  - ${!변수}을 통해 변수에 있는 값에 해당하는 이름의 변수를 참조할 수가 있다.
  - declare, local에 -n 옵션을 줘서, 값에 있는 변수 이름으로 변수를 참조하는 참조변수를 만들 수가 있다.
