■ 내장 명령

◎ 참조
  - <link contents="Bourne Shell Builtins" path="https://mug896.github.io/bash-shell/commands.html"/>
  - <link contents="eval" path="https://mug896.github.io/bash-shell/eval.html"/>
  - <link contents="getopts" path="https://mug896.github.io/bash-shell/getopts.html"/>
  - <link contents="printf" path="https://mug896.github.io/bash-shell/printf.html"/>
  - <link contents="read" path="https://mug896.github.io/bash-shell/read.html"/>

◎ 개요
  - 내장 명령은 쉘 내부에 내장되서 제공하는 명령이다. 외부에 파일로 존재하지 않고 sudo, env, 또는 find의 -exec 등으로 실행할 수 없고 쉘 환경에서만 사용할 수 있다.

◎ 스크립트 관련 명령
  - .
    - . filename [arg...]
    - .는 어셈블리나 링커 스크립트에서 현재 위치를 나타내는데 사용한다.
    - .는 쉘에서 현재 위치에 filename 파일을 include하는데 사용한다. (현재 쉘에서 쉘 스크립트를 실행한다.)
    - bash에서는 '.'와 동일한 기능의 source 명령을 추가로 제공한다.
    - filename에 경로를 지정하지 않으면 
      
  - source
    - source filename [args...]
    - '.' 명령과 동일하다.
    - bash에서만 사용할 수 있고 파일 이름을 찾을 때 $PATH에서 찾지 못하면 현재 디렉토리에서도 찾는다.$PATH를 검색한다. 만약 찾지 못하면 오류 메세지와 함께 0이 아닌 값을 반환한다.

  - break/continue
    - break [n]
    - continue [n]
    - 현재 실행하고 있는 반복문을 중단하는 역할/다음 반복으로 넘어가는 역할을 한다.
    - 반복문이 중첩될 수 있는데 이때 n 인자를 사용할 수 있다.
    - 반복문을 break로 종료했을 경우, 종료 상태값은 0이 된다.
  
  - declare
    - declare [-aAfFgilnrtuxp] [name[=value]...]
    - 변수를 선언하고 속성을 적용한다. 값을 대입하지 않으면 unset 상태로 남는다.
    - 변수나 배열의 현재 속성과 값을 보거나 함수 정의를 볼 때도 사용한다. 
    - 유효하지 않은 옵션을 사용하거나 값을 대입하면 종료 상태값으로 0이 아닌 값을 반환한다.
    - bash 전용이다. sh에서는 함수 내에서 local을 대신 쓴다.
    - 함수 내에서 사용시 기본적으로 지역 변수를 만든다.
    - 옵션
      - -f: 함수 정의를 볼 때 사용하거나 특정 옵션 동작의 범위를 함수로 적용시킬 때 사용한다.
      - -F: 함수 이름만 표시한다.
        - shopt -s extdebug 옵션을 적용하면 디버깅 시 줄 번호와 파일명도 표시한다.
      - -g: 함수 내에서 지역변수가 아닌 전역변수를 만든다.
      - -p: 해당 변수의 속성과 값을 볼 때 사용한다.
      
      - (아래 옵션은 속성을 줄 때 사용하는 옵션으로, - 대신 +를 사용하면 해당 속성이 꺼진다.)
      - -a: 일반 배열 속성을 부여한다.
      - -A: 연관 배열 속성을 부여한다.
      - -i: 정수 속성을 부여해, 값을 대입할 때 산술 연산을 할 수 있도록 한다.
      - -r: 읽기 전용 속성을 부여한다.
      - -t: trace 속성을 부여한다. 
        - trace 속성은 변수에는 기능이 없고 함수에는 trap DEBUG 등과 관련한 기능을 준다. 그래서 f 옵션이랑 함께 쓰인다.
      - -l: 대입 시 소문자 변환 속성을 부여한다.
      - -u: 대입 시 대문자 변환 속성을 부여한다.
      - -x: export 한다.

  - typeset
    - typeset [-aAfFgilrtux] [-p] name[=value]
    - declare의 동의어이다. deprecated 상태이다.

  - local
    - local [option] name[=value]
    - 지역 변수를 설정할 때 사용한다. 함수 내에서만 사용할 수 있으며, declare 명령에서 사용하는 옵션을 동일하게 사용할 수 있다.

  - readonly
    - readonly [-aAfp] [name[=value]]
    - 변수나 함수를 읽기 전용으로 설정할 때 사용한다. 설정 후 변경을 시도하면 오류메세지와 함꼐 종료상태 값으로 1을 반환한다.
    - readonly 변수가 되면 unset할 수도 없다. sh에서는 변수만 읽기전용으로 설정할 수 있다.
    - 옵션
      - -a: 일반 배열 변수
      - -A: 연관 배열 변수
      - -f: 쉘 함수
      - -p: 읽기 전용 변수를 출력 (f를 추가하면 함수만 출력)

  - unset
    - unset [-fvn] [name...]
    - 현재 설정한 변수나 함수를 삭제해 존재하지 않는 상태로 만든다.
    - 읽기 전용 변수는 unset하지 않는다.
    - 옵션
      - 없음: 변수를 unset 시도하고 실패하면 함수를 unset 시도한다.
      - -f: name을 함수로 취급한다.
      - -v: name을 변수로 취급한다.
      - -n: name 변수의 값에 해당하는 이름의 변수를 unset한다.
      
  - shift
    - shift [n]
    - 위치 매개변수를 왼쪽으로 한칸 먹는데 사용한다.

  - getopts
    - getopts optstring opt [arg]
    - 명령행의 옵션 중 short 옵션을 처리하기 위해 사용하는 명령이다.
    - 동작은 opstring에 있는 옵션 중 왼쪽에서부터 하나씩 끄집어낸다.
      - optstring은 short 옵션의 문자를 나열한 문자열이다. 옵션 인수를 가질 문자는 뒤에 ':'를 붙인다.
      - opt는 변수 이름으로 해당 변수에 현재 처리할 옵션이 담긴다.
      - $OPTARG 변수에는 옵션 인수가 담긴다.
      - $OPTIND 변수에는 다음 옵션의 인덱스가 담긴다. 
        - 붙여쓰기한 옵션의 경우 bash에서는 붙여쓰기한 옵션을 다 소진할 때까지 인덱스가 멈추가 sh에서는 소진하기 전에 인덱스가 미리 다음 옵션을 가리킨다.
      - arg는 처리할 옵션이 담긴 매개변수 목록으로 기본값은 '$@'이다.
      - 처리가 끝나면 false인 종료상태 값을 반환한다.
    - 오류 처리는 두가지 모드를 제공한다.
      - {모드, 유효하지 않은 옵션 사용 시, 옵션 인수를 제공하지 않을 시}
      - {verbose, 
          opt 값을 ? 문자로 설정하고 $OPTARG는 unset, 오류 메시지를 출력, 
          "" }
      - {silent, 
          opt 값을 ? 문자로 설정하고 $OPTARG는 해당 옵션 문자로 변경,
          opt 값을 : 문자로 설정하고 $OPTARG는 해당 옵션 문자로 변경 }
    - $OPTIND와 $OPTARG는 지역 변수가 아니므로 필요 시 함수 내에서 local로 설정해 사용해야 한다.
    - getopts로 옵션을 처리하는 명령어 사용시, 옵션이 앞에, 실 매개변수가 뒤에 와야 한다.
    - 사용방법은 while문의 조건 안에 getopt 명령을 놓고 case 문의 조건으로 opt 이름의 변수를 놓고 사용하는 것이다.

    - getopt라는 외부 명령도 존재하며 short, long 옵션을 모두 지원한다. 인수를 요구하는 옵션에 ':' 문자를 사용하는 것은 동일하다.
      - getopt [-o optstring] [-l optlong_string] [--] args
      - 동작은 옵션을 앞으로, 실 매개변수는 뒤로 배치해 출력해준다. 옵션 목록은 options
      - short 옵션은 -o 옵션과 인수로 optstring을 주면 된다.
      - long 옵션은 -l 옵션과 인수로 ','로 구분하는 옵션명 목록을 주면 된다.
      - 옵션과 실 매개변수의 순서는 상관없이 따로 정렬해주어 출력해준다.
      - 사용방법은 명령치환을 통해 getopt의 출력을 변수로 저장하고 변수를 다시 set -- {options}를 통해 등록한다. 그 후 무한루프문 안에서 case문의 조건으로 $1를 놓고 인수가 없으면 shift, 있으면 shift 2로 위치변수를 옮기면서 처리한다.

  - exit
    - exit [n]
    - 쉘을 빠져나간다. n은 종료상태값이 되며 $?를 통해 구할 수 있다. n을 설정하지 않으면 이전 명령의 종료상태 값이 된다.

  - export
    - export [-fnp] [name[=value]]
    - 현재 변수를 자식 프로세스에서도 사용할 수 있게 해준다.
    - A.sh 스크립트 내에서 B.sh 스크립트를 실행하면 A.sh는 부모, B.sh는 자식 프로세스가 된다. A.sh에서 설정한 변수를 B.sh에서는 쓰지 못하는데, export 명령을 사용하면 B.sh에서도 사용할 수 있게 된다.
      - export는 처음 한번만 해주면 된다.
      - 명령 실행시 인수를 주지 않으면 export된 값을 출력한다
      - 함수를 export할 때는 -f 옵션을 사용한다.
      - 현재 쉘에 export된 변수를 보려면 -p 옵션을 사용한다.
      - 변수의 export를 취소하려면 -n 옵션을 사용한다.
    - sh에서 변수만 export할 수 있고 함수는 그럴 수 없다.

  - return
    - return [n]
    - 함수나 source한 스크립트에서 종료상태 값 n을 반환한다. 반환한 값은 $?를 통해 확인할 수 있다.
    - return 명령을 사용하지 않으면 마지막 실행 명령의 종료상태 값이 된다.

◎ 기능 명령
  - test
    - test [expr]
    - 식을 테스트하는데 사용한다. 자세한건 기본의 특수 명령 문서에서 확인할 수 있다.

  - [
      - [ arg... ]
      - test 명령과 동일한 명령이다. 자세한 정보는 기본의 특수 명령 문서에서 찾을 수 있다.

   - :
    - 아무일도 하지 않는 명령어이다. 종료 상태 값으로 항상 0을 반환한다. 실질적으로 true 명령과 동일하다.
    - 간단한 스크립트 테스트를 할 때, true가 올 수 있는 자리에 대신 사용하기 편하다.
    - 디버깅 시에 인수에서 매개변수 확장, 명령치환, 산술확장이 이뤄지므로 디버깅 시에 특정 값을 보기 위해 사용할 수 있다. 
  
  - true/false
    - 항상 종료상태값 0/1을 반환하는 명령이다.

  - cd
    - cd [-L|[[-P [-e]] [-@]]] [dir]
    - 현재 작업 중인 디렉토리를 변경한다. -P 옵션을 주면 심볼릭 링크 디렉토리 구조를 따르지 않고 물리적 디렉토리 구조를 따른다.

  - pwd
    - pwd [-LP]
    - 현재 작업중인 디렉토리를 출력한다.
    - -L이 기본 옵션이고 -P는 심볼릭 링크를 해석해 물리적인 디렉토리를 출력해준다.
    - $PWD, pwd 내장명령, pwd 외부명령으로 현재 작업 디렉토리를 출력할 수 있다. 외부 명령은 -P가 기본 옵션이다.
 
  - echo
      - echo [-neE] [arg...]
      - 인수를 출력한다. 기본적으로 이스케이프 문자는 처리하지 않으며 마지막에 개행 문자를 붙인다.
      - 옵션
        - -n: 출력 시 마지막 개행문자를 붙이지 않는다.
        - -e: 이스케이프 문자 처리를 활성화한다.
        - -E: 이스케이프 문자 처리를 비활성화한다.
      - sh의 echo는 이스케이프 문자를 기본적으로 처리한다.

  - printf
    - printf [-v var] format [args...]
    - printf는 C언어의 printf처럼 서식을 이용해 변수를 출력하는 명령어이다.
    - printf는 기본적으로 이스케이프 문자 처리를 한다. 이스케이프 문자 처리를 하지 않으려면 따로 %s 서식을 사용한다.
    - \NNN은 8진수 문자, \xHH는 16진수 문자를 의미한다.
    - -v 옵션은 출력값을 변수에 저장한다. (bash 전용)
    - 인자
      - 서식에 대응하는 인수는 여러가지 형태를 받을 수 있다.
      - N: 10진수 숫자
      - 0N: 8진수 숫자
      - 0xN: 16진수 소문자 숫자
      - 0XN: 16진수 대문자 숫자
      - 'X, "X: 문자열이 아닌 문자 하나
      - 서식 문자열보다 인자가 많으면 남은 인자만큼 명령을 반복한다.
    - 서식 태그
      - 서식 문자열에서 다음과 같이 서식 태그를 구성해 인수 값의 출력 형태를 변경할 수 있다.
      -> %[flags][width][.precision]specifier
    - specifier
      - %d, %i: 부호있는 10진수 정수로 표시한다.
      - %u: 부호없는 10진수 정수로 표시한다.
      - %o: 부호있는 8진수 정수로 표시한다.
      - %x: 부호있는 소문자 16진수 정수로 표시한다.
      - %X: 부호있는 대문자 16진수 정수로 표시한다.
      
      - %f: 부동소수점 표기법으로 실수를 표시한다.
      - %e: 과학적 표기법으로 실수를 표시한다.
      - %E: %e랑 같으나 e가 아닌 E를 사용한다.
      - %g: %f와 %e 중 길이가 짧은 방법을 선택해 표시한다.
      - %a: C99 형식의 16진수 부동소수점 표기법으로 실수를 표시한다. (bash 전용)
      - %A: %a와 같으나 대문자로 표시한다. (bash 전용)

      - %s: 인수값을 이스케이프 처리없이 그대로 출력한다.
      - %b: 인수값을 이스케이프 처리하여 출력한다.
      - %q: 쉘의 입력값으로 사용할 수 있게 이스케이프해 출력한다.
      - %c: 인수의 첫번째 문자를 출력한다.
      
      - %(FORMAT)T: FORMAT에 따라 현재 날짜/시간을 출력한다.
      - %%: % 문자를 일반 문자로 출력할 떄 사용한다.
      - %n: 앞에서 출력한 문자수를 인수로 주어진 변수에 대입한다.
    - width
      - N: 최소 출력 길이를 설정한다. 만약 N보다 작게 출력된다면 남은 공간은 공백으로 채워넣는다.
      - *: 최소 출력 길이도 인수로 받는다.
    - flags
      - -: 최소 출력 길이 안에서 값을 왼쪽 정렬해 출력한다.
      - 0: 최소 출력 길이 안에서 남은 공간을 0으로 채워넣는다.
      - +: 숫자에 +/- 부호를 붙여 표시한다.
      - (space): +와 같지만 부호 +를 공백으로 대신한다.
      - ': 1000의 자리마다 콤마를 넣어 표시한다. (bash 전용)
      - #o: 8진수 숫자를 표시할 때 앞에 0을 붙인다.
      - #x,#X: 16진수 숫자를 표시할 때 앞에 0x,0X를 붙인다.
      - #g,#G: precision 내에서 소수부의 남은 공간에 0을 채운다.
    - precision
      - width에서 .을 이용하면 왼쪽에 field width, 오른쪽에 precision을 설정할 수 있다. field width 크기는 precision을 포함한다.
      - .N: precision 값을 설정한다.
      - .*: precision 값을 인수로 받는다.
      - %f의 precision은 소수점 이후의 개수를 나타내고 %g는 전체 유효숫자 개수(0이 아닌 숫자 개수)를 나타낸다.
      - %.s, %.0s는 해당 인수를 출력에서 제외하는 효과가 있다.
      
  - read
    - read [-ers] [-a array] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]
    - stdin에서 라인을 읽어들여 IFS 값에 따라 라인을 분리한 다음 지정한 [name ...]에 할당한다.
    - awk의 용어를 빌려보면 라인은 record에 해당하고 분리된 값은 field에 해당하며 -d delim 옵션으로 지정하는 값은 RS(Record Seperator), IFS값은 FS(Field Seperator)와 같은 의미가 된다.
    - name 값을 주지 않으면 읽어들인 라인은 REPLY 변수에 할당된다.
    - 파이프로 연결된 명령은 하위 쉘에서 실행되므로 파이프 안의 read는 쉘의 변수를 조작하지 못한다.
    - 라인의 앞,뒤 공백은 제거된다. IFS 값을 빈 문자열로 설정해야 공백이 유지된다.
    - 옵션
      - -r: 읽어들이는 데이터에서 이스케이프(\)를 비활성화한다. (raw)
      - -d delim: 라인 구분자를 지정한다. 기본값은 개행 문자이다.
      - -a array: 단어를 분리해 array 배열에 입력한다.
      - -p prompt: 사용자에게 값을 입력받을 때 prompt를 설정할 수 있다.
        - 프롬프트를 표시할 때 stderr로 출력한다.
        - 파이프나 파일로 읽어들이기를 하여 stdin이 터미널이 아닐 경우 표시하지 않는다.
      - -e: 사용자가 값을 입력할 때 readline을 사용하므로 편집 관련 단축키를 사용할 수 있다.
      - -i text: -e 옵션과 같이 사용해 초기 입력값을 설정할 수 있다.
      - -s: 사용자가 입력하는 값을 화면에 표시하지 않는다.
      - -n nchars: ncahrs만큼 문자을 읽어들인다. 중간에 라인 구분자를 만나면 중단한다.
      - -N chars: 라인 구분자를 상관하지 않고 무조건 nchars만큼 읽어들인다.
      - -t timeout: 사용자에게 입력받을 때 timeout 값을 초 단위로 설정할 수 있다.
        - FD를 named pipe에 연결해 사용할 떄 유용한 기능이다. FD를 파일에 연결해 사용할 경우 읽어들일 라인이 없으면 바로 리턴하고 오류값을 반환하지만, named pipe 같은 경우 더이상 진행하지 못하고 block된다. 이때 timeout값을 설정하면 block 상태를 벗어날 수 있다.
        - timeout 값을 0으로 설정하면 실제 라인을 읽어들이지 않는다. 대신 읽어들일 라인이 있으면 0, 그 외에는 오류를 반환해 읽어들일 라인이 있는지 없는지 테스트하는 용도로 사용할 수 있다.
        - timeout 값은 소수로 입력할 수 있다.
      - -u fd: stdin 대신 파일 지시자로부터 데이터를 읽어들인다. (이진 파일은 읽을 수 없음)
    - 종료 상태는 성공 시 0, 다음의 경우 오류로 취급해 0이 아닌 값을 반환한다.
      - timeout 초과 (이때 128 이상의 값을 반환한다.)
      - 변수에 값을 할당할 때 오류 발생 시
      - -u 옵션의 파일지시자 인수가 유효하지 않을 시
      - EOF를 만날 시

  - mapfile
    - mapfile [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
    - 라인을 array 변수로 읽어들인다 변수명을 주지 않으면 $MAPFILE 변수가 사용된다.
    - 몇번째 라인부터 읽어들일지, 저장되는 array의 몇번째 인덱스에 입력할지 정할 수 있고 callback 명령을 설정할 수도 있다.
    - bash 전용이다.
    - 옵션
      - -t: 읽어들이는 라인의 마지막 newline 문자를 제거하고 원소에 넣는다.
      - -s count: 몇번쨰 라인부터 읽어들일지 정한다.
      - -n count: 몇개의 라인을 읽어들일지 지정한다. 0이면 전체 라인을 읽어들인다.
      - -O origin: array 변수의 몇번째 인덱스부터 입력할지 지정한다.
      - -u fd: 파일지시자로부터 라인을 읽어들인다.
      - -C callback: callback 명령을 지정한다.
        - callback 명령의 $1에는 index값이, $2에는 라인이 전달된다.
        - 내부적으로 read를 사용하기 때문에 read 명령을 사용하면 array에 입력되는 라인이 스킵된다.
      - -c quantum: 몇개의 라인을 읽어들인 후 callback을 호출할지 지정한다.
  
  - readarray
    - readarray [-n count] [-O origin] [-s count] [-t] [-u fd] [-C callback] [-c quantum] [array]
    - mapfile 명령과 동일하며 bash 전용이다.

  - eval
    - eval [arg...]
    - 인수로 주어지는 문자열을 명령문으로 평가해 실행한다.
    - eval 명령문에서는 결과적으로 치환과 확장이 두번 일어나게 된다.
    - 활용 예시
      - eval 명령을 이용해 동적으로 명령문을 만들 수 있고 간점 참조를 할 수도 있다.
      - 명령치환 결과로 쉘에서 실행 가능한 명령문이 나오면 그 명령은 기본적으로 실행가능하지만 파이프나 리디렉션, 따옴표 등이 명령치환 결과로 나온다면 명령문을 실행할 수 없게 된다. 왜냐하면 명령문에서 사용되는 키워드, 메타문자, 따옴표 등은 확장과 치환 이전에 해석이 완료되기 때문이다. 이와 같은 경우에 eval이 쓸 수 있다.
      - brace 확장이 변수 확장보다 먼저 일어나기 때문에 brace 확장의 범위값으로 변수를 쓰지 못한다. 이 경우에 eval을 쓸 수가 있다.
      - 대입 연산과 일반 명령을 연결할 때도 사용할 수 있다. 대입 연산보다 변수 확장이 먼저 일어나기 때문에 대입 연산의 결과를 후행하는 명령에 적용할 수 없다. 이 경우에 eval을 사용할 수 있다.
      - printf %q를 이용해 인수를 설정할 때, 단순히 set 명령만 사용하면 안되고 eval set을 사용해야 인수가 올바로 설정된다.
  
  - let 
    - let arg [args...]
    - 산술 연산 표현식에 사용하는 명령이다. 식을 작서알 때 공백없이 붙여야 하지만 따옴표를 사용할 경우 공백을 사용할 수 있다.
    - bash 전용이다.
    - 자세한 내용은 기본의 특수명령 문서에서 확인할 수 있다.

  - exec
    - exec [-cl] [-a name] [command [args...]] [redirection ...]
    - 현재 쉘 프로세스를 command로 대체한다. 디스크에서 프로그램 이미지를 읽어와 현재 쉘 프로세스가 가지고 있는 메모리 공간을 대체하는 것이다.
    - ps 목록에 보이는 이름도 바뀌고, command를 실행할 수 없을 경우, 프롬프트 환경에서는 경고 메시지를 띄우고, 스크립트 환경에서는 exit한다. (execfail 옵션을 사용해 exit을 방지할 수 있다.)
    - 현재 쉘에 리디렉션을 적용한다.
    - bash 전용 옵션 목록
      - -a name: 0번째 인수는 명령의 이름(command)을 나타내는데 이 옵션을 변경할 수 있다.
        - /proc/$PID/cmdline 값과 관련된 것으로 ps 목록에도 변경된 이름이 나타난다.
      - -c: 모든 환경변수를 삭제한 상태(empty environment)로 면령을 실행한다. (env -i와 같은 역할)
      - -l: login shell로 실행한다. 명령 이름 앞에 - 문자가 붙게 된다.
    
  - times
    - 프로세스 시간을 보여준다.
    - 현재 쉘과 자식 프로세스의 사용자/시스템 시간을 모두 합해 보여준다.

◎ 쉘/사용자 설정 명령어
  - set
    - set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]
    - 쉘 옵션을 설정하거나 위치 매개변수를 설정하는데 사용한다.
    - 활성화된 옵션은 $SHELLOPTS 변수에 ':'로 분리되어 저장되며 $- 변수에는 옵션 플래그가 저장된다.
    - 활성화할 때는 -, 비활성화할 때는 +를 사용한다.
    - [ -o 옵션명 ]으로 현재 설정값을 테스트할 수 있다.

  - shopt
    - shopt [-pqsu] [-o] [optname ...]
    - bash 옵션을 설정할 때 사용한다. 활성화된 옵션은 $BASHOPTS 변수에 ':'로 분리해 저장한다.
    - 활성화 시에 -s, 비활성화 시에 -u, 설정 여부를 테스트할 시에 -q 옵션을 사용할 수 있다.

  - unmask
    - unmask [-p] [-S] [mode]
    - 현재 사용자가 새로 생성하는 파일/디렉토리의 기본 접근권한을 설정하는데 사용한다.
    - 초기 파일 접근권한은 666, 디렉토리는 777이다. 여기에 8진수 mode를 뺀 값을 접근권한으로 설정한다.
    - bash 전용이다.

  - bind
    - bind [-lpsvPSVX] [-m keymap] [-f filename] [-q name] [-u name] [-r keyseq] [-x keyseq:shell-command] [keyseq:readline-function or readline-command]
    - readline의 설정 파일인 inputrc에서 할 수 있는 옵션 설정, key binding을 이 명령을 통해 동일하게 할 수 있다.
    - 사용할 수 있는 함수나 옵션의 목록을 볼 수도 있으며 현재 설정 상태도 확인할 수 있다.
    - bash 전용이다.
    
  - ulimit
    - ulimit [-SHabcdefilmnpqrstuvxT] [limit]
    - 쉘의 리소스 제한을 설정한다. hard limit(-H)은 root 유저만 설정할 수 있고 soft limit(-S)은 hard limit 이내에서 일반 사용자가 설정할 수 있다. 설정된 값은 자식 프로세스에게도 상속한다. 터미널에서 설정할 때 따로 옵션을 주지 않으면 hard limit 설정이 된다. 사용자는 한번 hard limit을 내리면 다시 올릴 수 없으므로 -S 옵션을 사용해 설정해야 한다.
    - 웹서버나 데이터 서버 등을 운영할 때 설정값이 너무 낮으면 열린 파일 수가 너무 많다거나 스레드를 생성할 수 없다는 리소스 관련 오류가 발생할 수 있다. 이때 startup 스크립트 파일에서 uliit 명령을 이용해 관련 리소스를 설정하거나 또는 시스템 설정 파일을 수정해 reboot 후에도 유지되게 할 수 있다.
    - 현재 실행중인 프로세스의 설정 상태는 pid를 구한 후 cat /proc/$pid/limits 명령으로 알아볼 수 있다.
    
  - logout
    - logout [n]
    - login shell일 경우 로그아웃한다. login shell이 아니면 오류가 발생한다.
    - bash 전용이다.

◎ 명령 유형 관련 명령어
  - alias
    - alias [-p] [name[=value] ... ]
    - 별칭을 설정하는데 사용한다. alias 기본적으로 non-interactive shell에서는 사용할 수 없다.

  - builtin
    - builtin [shell-builtin [args...]]
    - 우선순위가 높은 별칭, 함수 이름을 피해 내장 명령을 실행할 때 사용한다.
    - bash 전용이다.

  - command
    - command [-pVv] command [args...]
    - 우선순위가 높은 별칭, 함수 이름을 피해 외부 명령이나 내장 명령을 실행할 떄 사용한다.
    - -v 옵션은 명령이 존재하는지 체크하는 데 사용할 수 있다.

  - enable
    - enable [-adnps] [-f filename] [name...]
    - 내장 명령을 활성화/비활성화시키는 데 사용한다. 비활성화시키면 동일한 이름의 외부 명령이 사용된다.
    - 기본적으로 제공하는 내장 명령 외에 bash-builtins 패키지를 설치하면 내장 명령을 만들어 사용할 수 있다.
      - -f filename: 동적 라이브러리, filename을 name 이름의 내장 명령으로 추가한다.
      - -d: -f 명령으로 추가한 내장 명령을 삭제한다.- help
    - help [-dms] [pattern]
    - 내장 명령의 도움말을 보여준다.
    - bash 전용이다.

  - unalias
    - unalias [-a] name [name...]
    - 설정한 별칭을 삭제하는데 사용한다.
    - -a 옵션을 사용하면 전체 별칭을 삭제한다.

  - type
    - type [-afptP] name [name ...]
    - 명령(들)의 유형에 정보를 보여준다.
    - 옵션
      - -a: 별칭, 키워드, 함수, 내장 명령, 외부 명령을 모두 구분해서 보여준다.
      - -f: 검색에서 함수는 제외한다.
      - -p: 해당 명령(들)이 실행 가능한지 테스트할 때 사용할 수 있다. 외부 명령의 경우 파일만 존재하면 참이 된다.
      - -P: 해당 명령이 외부 명령으로 존재하는지 테스트할 수 있다. 이 옵션은 which 명령과 비슷한데, 다른 점은 파일이 executable인지도 체크한다.
      - -t: 해당 명령의 유형을 표시한다. 명령이 중복해 존재할 경우 처음 하나만 표시한다.

◎ bash 관련 명령
  - compgen
    - compgen [-abcdefgjksuv] [-o option] [-A action] [-G globpat] [-W wordlist] [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [word]
    - 명령 자동완성에 사용될 단어를 생성하는데 사용한다. 주로 자동완성 함수를 작성할 때 COMPREPLY 변수에 값을 채워넣기 위해 사용한다.
    - 사용 가능한 옵션은 complete 명령과 거의 동일하며 마지막에 word 인수가 주어지면 word와 매칭하는 단어만 선택한다.
    - 옵션
      - -a: 현재 설정된 별칭 목록
      - -b: 내장 명령 목록
      - -c: $PATH에 의해 접근가능한 시스템 전체 명령
      - -d: 현재 위치에서 디렉토리만 나열
      - -e: export한 환경변수 목록
      - -f: 현재 위치의 모든 파일 나열
      - -g: /etc/group에 등록된 그룹 목록
      - -j: 백그라운드로 실행중인 작업 목록
      - -k: 키워드 목록
      - -s: /etc/services에 등록된 서비스 목록
      - -u: /etc/passwd에 등록된 사용자 목록
      - -v: 현재 쉘에 있는 모든 변수 목록
    - bash 전용이다.

  - complete
    - compgen [-abcdefgjksuv] [-prDE] [-o option] [-A action] [-G globpat] [-W wordlist] [-F function] [-C command] [-X filterpat] [-P prefix] [-S suffix] [name...]
    - 특정 이름의 자동완성을 등록하고 설정하는 역할을 한다. 자세한 내용은 기타의 자동완성 문서에서 찾을 수 있다.
    - bash 전용이다.

  - compopt
    - comptopt [-o|+o option] [-DE] [name...]
    - complete로 등록해 사용중인 명령 자동완성의 옵션을 변경할 수 있다. -o는 on, +o는 off를 나타낸다. name은 자동완성이 적용된 명령 이름이다.
    - 자동함수 내에서 name 없이 사용하면 현재 tab 실행에 대한 옵션만 적용시킬 수 있다.
    - bash 전용이다.

◎ 히스토리 관련 명령
  - hash
    - hash [-lrdt] [-p pathname] [names...]
    - 프롬프트에서 명령을 실행할 때 절대경로를 사용하지 않으면 $PATH 환경변수에 설저어된 디렉토리를 검색해서 명령을 찾는다. 한번 검색한 명령은 재검색 없이 실행할 수 있게 해쉬 테이블에 저장해 놓는다.
    - hash 명령을 사용하면 $PATH를 검색해서 찾은 면열을 볼 수 있고 삭제할 수 있다.
    - 옵션
      - 없음: 인자가 없으면 해쉬테이블을 간략히 보여준다.
      - -d: 해쉬테이블에서 이름을 삭제한다.
      - -l: 해쉬테이블의 목록을 보여준다.
      - -p pathname: 해쉬테이블에 해당 경로를 해당 이름의 전체 경로(값)로 추가한다.
      - -r: 해쉬테이블을 초기화한다.
      - -t: 해당 이름과 매칭하는 경로르 보여준다. 

  - history
    - history [-c] [d offset] [n]
    - hstory -anrw [filename]
    - history -ps arg [args...]
    - 기타의 명령 히스토리 문서에서 자세한 내용을 확인할 수 있다.
    - bash 전용이다.

  - fc
    - fc [-e ename] [-hnr] [first] [last]
    - fc -s [pat=rep] [command]
    - 명령 history에서 지정한 범위의 명령을 에디터로 불러와 수정해 스크립트처럼 한번에 실행시킬 수 있다.
    - !를 이용한 history 확장처럼 명령을 검색해 실행할 수 있다.
    - bash 전용이다.

  - dirs
    - dirs [-clpv] [+N] [-N]
    - pushd, popd 명령과 함께 디렉토리 스택을 다루는데 사용하며, 현재 스택 내용을 보여준다.
    - 0번은 항상 현재 디렉토리를 나타낸다.
    - bash 전용이다.

  - popd
    - popd [-n] [+N|-N]
    - pushd, dirs 명령고 함께 디렉토리 스택을 다루는데 사용되는 명령으로 스택에서 디렉토리 항목을 삭제하고 cd한다.
    - bash 전용이다.

  - pushd
    - pushd [-n] {+N,-N,dir}
    - popd, dirs 명령과 함께 디렉토리 스택을 다루는데 사용하는 명령으로 스택에 디렉토리 항목을 추가하고 cd한다.
    - bash 전용이다.

◎ 디버깅 명령  
  - trap
    - trap [-lp] [[arg] signal_specs...]
    - 시그널을 가로채 처리하는데 사용한다. 자세한건 기타의 디버깅 문서에서 확인할 수 있다.

  - caller
    - caller [expr]
    - 현재 실행중인 함수의 콜 스택을 표시한다.
    - 인수 없이 사용하면 줄 번호, 파일명, (${BASH_LINENO[0]} ${BASH_SOURCE[1]})을 표시하고 숫자로 인수를 주면 줄 번호, 파일 이름, (${BASH_LINENO[i]} ${FUNCNAME[$i+1]} ${BASH_SOURCE[$i+1]})을 표시한다. 스택 트레이스에서도 사용할 수 있다.
    - bash 전용이다.

  - kill
    - kill [-s sigspec | -n signum | -sigspec] {pid|jobspec...}
    - kill -l [sigspec]
    - 자세한 내용은 기타의 디버깅 문서에서 확인할 수 있다.

◎ 작업 관리 명령
  - fg
    - fg [job_spec]
    - 작업 관리 항목에서 자세한 설명을 볼 수 있다.

  - bg
    - bg [job_spec ...]
    - 작업 관리 항목에서 찾을 수 있다.

  - disown
    - disown [-har] [jobspec ...]
    - 작업 관리 항목에서 자세한 내용을 찾을 수 있다.
    - bash 전용이다.

  - jobs
    - jobs [-lnprs] [jobspec...]
    - jobs -x command [args...]
    - 작업 관리 항목에서 자세한 설명을 볼 수 있다.
  
  - suspend
    - suspend [-f]
    - 작업 관리 항목에서 자세한 내용을 찾을 수 있다.
    - bash 전용이다.
    
  - wait
    - wait [-n] [id...]
    - 작업 관리 항목에서 자세한 내용을 확인할 수 있다.
