■ 키워드와 복합문

◎ 참조
  - <link path="https://mug896.github.io/bash-shell/compound_commands.html" contents="Compound Commands"/>

◎ 키워드 명령어
  - 다음은 쉘에서 제공하는 키워드이다. 대부분 복합 명령(compound commands)를 작성하는데 사용한다.
    - <code type="shell_example">
      $ compgen -k | column

      if        then      else      elif      fi        case      
      esac      for       select    while     until     do        
      done      in        function  time      {         }         
      !         [[        ]]        coproc
    - </code>
  - 키워드는 기본적으로 명령 이름이 위치하는 곳에 사용하고 명령의 인수 부분에선 사용할 수 없다.

◎ time 키워드
  - time [-p] pipeline
  - 명령을 실행하는데 걸린 시간을 표시해준다. 명령을 파이프로 연결하거나 { }, ( )로 그루핑되어있으면 모든 명령을 포함한다.
  - TIMEFORMAT 환경변수를 이용해 출력 형식을 변경할 수 있다.
  - 출력
    - real: wait clock 시간이라고 하며, 프로그램을 시작한 후부터 종료될 떄까지를 시계로 잰 것과 같다. 그러므로 프로그램 실행 시 단순히 I/O를 위해 wait한 시간이나 sleep한 시간도 모두 포함한다.
    - user: user 모드에서 사용한 cpu 시간이다. wait한 시간은 포함하지 않는다.
    - sys: kernel 모드에서 사용한 cpu 시간이다. 메모리를 할당하거나 디스크 같은 장치에 접근하는 것은 system call을 통한 kernal 모드에서 실행된다.
    - user와 sys 시간이 실질적으로 프로그램이 사용한 cpu 시간이라고 볼 수 있다.
    - 멀티코어에서 user와 sys는 각 cpu가 사용한 시간을 모두 합한 시간이다.
      - 그래서 user+sys 시간이 real 시간보다 더 길 수도 있다.
  - 종료 상태
    - pipeline이 반환하는 종료상태가 된다.
  
◎ coproc 키워드
  - coproc [NAME] command [redirection]
  - 두 프로세스 간의 양방향 통신을 가능하게 한다. coproc은 command를 백그라운드로 실행시키는데 이때 command의 stdin, stdout이 파이프를 통해 현재 shell의 FD와 연결이 된다. 따라서 현재 쉘에서 command에 데이터를 보내고 결과를 받을 수 있게 된다.
  - 현재 쉘에 설정되는 파일 지시자는 $COPROC 배열 변수에 저장된다. 그래서 command로 데이터를 보낼 때는 >& ${COPROC[1]}, 받을 떄는 <& ${COPROC[0]}으로 활용할 수가 있다.
  - 백그라운드 프로세스의 PID는 $COPROC_PID 변수에 저장된다.
    - 만약 NAME 인수를 사용하면 $COPROC 변수 대신 $NAME 변수가 사용된다.

◎ 복합문
  - 프로그래밍 언어에서 expression은 실행됬을 떄 값을 반환하고 연산자(&&, || 등)로 연결할 수 있다. 반면 statement는 값을 반환하지 않고 코드 실행의 역할을 한다.
  - 이런 점에서 쉘의 명령문은 &&, ||로 연결할 수 있고 종료 코드를 반환하고, $( )로 출력을 대입할 수 있기 때문에 하나의 expression으로 볼 수 있다.
  - 쉘의 복합문, if, for, while은 얼핏 보기에 프로그래밍의 제어문처럼 statement의 성격을 띄는 것처럼 보이지만, 이들 또한 &&와 ||로 연결할 수 있고 종료코드를 반환하며 리다이렉션이나 파이프도 사용할 수 있다. 그래서 쉘의 복합문 또한 expression의 성격을 띄며, 쉘의 모든 명령문은 expression이라 볼 수가 있다.

  - 쉘의 복합문은 compgen -k 명령으로 볼 수 있는 키워드로 구성할 수 있다. 복합문의 특징으로는 키워드로 시작해서 키워드로 끝난다는 특징이 있다.
    - if 문: if ... fi
    - case 문: case .. esac
    - select 문: select ... done
    - while 문: while ... done
    - until 문: until ... done
    - for 문: for ... done
  - 복합문의 종료 상태는 본문 진입에 성공할 시 마지막에 실행된 명령의 종료 상태, 실패할 시엔 0이 된다.

  - 쉘에서 명령을 구성하는 방법
    - 1. 한줄에 하나씩 명령 실행
    - 2. ; 메타문자를 이용한 한 줄에 여러 명령 실행
    - 3. 파이프를 이용한 여려 명령 실행
    - 4. &&, || 메타문자를 이용한 조건부 명령 실행
    - 5. { ;}, ( )를 이용한 명령 그루핑
    - 6. 쉘 키워드를 이용한 복합문 구성

◎ if 문
  - 구조
    - <code>
      if test_command;
        then command
      [ elif test_command; 
        then command ]
      [ else 
        command ]
      fi
      # 여기서 []는 구문 표현으로 내용이 옵션이란 뜻이다. 명령문의 구성요소가 아니다.
    - </code>
  - if 문은 조건이 될 명령을 실행하고 종료 상태의 참/거짓을 구별해서 명령을 실행하는 복합문이다.
  - if 문은 if, elif, else, fi, then 키워드를 사용한다. if 명령, then 명령, ...이 이어지고 fi로 if문을 닫는다.

◎ case 문
  - 구조
    - <code>
      case word in
        [ [(] pattern [| pattern] ... ) command;;] ...
      esac
      # 여기서 []는 구문 표현으로 내용이 옵션이란 뜻이다. 명령문의 구성요소가 아니다.
    - </code>
  - case 문은 문자열/변수/등을 패턴을 이용해 매칭해서 명령을 실행하는 복합문이다.
  - case 문은 case, in, esac 키워드를 사용한다. case 문자열 in, 패턴1) 명령1;; 패턴2) 명령2;; ...가 이어지고 esac으로 case문을 닫는다.
  - pattern)의 종료문자는 ;;, ;&, ;;&를 사용한다.
    - ;;는 본문을 실행하고 빠져나간다.
    - ;&는 본문을 실행하고 다음 pattern의 본문을 실행한다.
    - ;;&는 본문을 실행하고 다음 매칭되는 pattern의 본문을 실행한다.
  - pattern)에서 |를 구분자로 하여 여러개의 값을 사용할 수도 있다. 이때 양쪽의 공백은 사용하지 않으니 붙여쓰지 않아도 된다.
  - word, pattern에 공백을 넣고 싶다면 따옴표를 사용하거나 이스케이프를 하면 된다.
  - word, pattern에서 변수/명령치환을 사용할 때 globbing이 일어나지 않아 따옴표를 사용하지 않아도 된다.
  - word에 배열이 사용될 경우 전체 원소가 하나의 값으로 사용된다.
  - *)는 모든 매칭을 뜻하므로 default로 사용할 수 있다.
  - shopt -s nocasematch 옵션을 사용하면 대소문자 구분 없이 매칭할 수 있다.

◎ select 문
  - 구조
    - <code>
      select name [in words ...]
      do
        commands
      done
    - </code>
  - select 문은 사용자에게 name 변수를 입력받고 해당 변수로 행동할 수 있는 복합문이다.
  - select 문은 select, in, do, done 키워드를 사용한다. select 변수 in 선택할 문자열들 do 명령...이 이어지고 done으로 select문을 닫는다.
  - select 문의 프롬프트는 PS3 변수, 입력한 값은 name 변수와 REPLY 변수에 저장된다.
  - words는 공백(IFS)으로 구분한다.
  - in words 부분을 생략하면 in "$@"와 같게 된다.
  - 프롬프트에서 enter를 입력하면 목룍을 다시 표시하고, CTRL-D를 입력하면 select loop를 종료하고 다음 명령을 진행한다.
  - select 문은 본문을 끝내고서도 입력을 계속 받는다. 그래서 선택을 완료하고 진행하기 위해서는 break 명령으로 종료해야 한다.

◎ for 문
  - 구조
    - <code>
      for name [ in words...]
      do
            commands
      done
      
      for ((name=init; name < range; name++))
      do
        commands
      done
    - </code>
  - for 문은 원소를 순회하며 반복하는 복합문이다.
  - for 문은 for, in, do, done 키워드를 사용하며 for 순회변수 in 문자열들 do 명령...이 이어지고 done으로 for문을 닫는다.
  - words는 공백(IFS)으로 구분한다.
  - in words를 생략하면 in "$@"와 같게 된다.

◎ while 문
  - 구조
    - <code>
      while test_command
      do
        commands
      done
    - </code>
  - while 문은 테스트 명령이 비정상 종료할 떄까지 반복하는 복합문이다.
  - while 문은 while, do, done 키워드를 사용하며 while 테스트_명령 do 명령...이 이어지고 done으로 while문을 닫는다.

◎ until 문
  - until 문은 테스트 명령이 정상 종료할 때까지 반복하는 복합문이다.
  - until 문은 wihle 문과 구조가 똑같으며 while 키워드만 until로 바꾸면 된다.

◎ break, continue 명령
  - break [N]
  - continue [N]
  - while, until, for, select 반복문에서 사용되는 내장 명령이다. 
  - break는 현재 반복문을 탈출하고, continue는 다음 반복으로 넘어간다.
  - 이 때, 인수로 반복문의 중첩 깊이를 주면 해당 중첩 깊이의 반복문을 탈출한다.

◎ 추가
  - 쉘에서 반복문을 사용할 떄 10,000번을 반복한다면 운영체제가 적어도 프로세스를 10,000번 생성한다. 그래서 되도록이면 반복 작업을 처리하는 단일 명령을 사용하는 것을 추천한다.
