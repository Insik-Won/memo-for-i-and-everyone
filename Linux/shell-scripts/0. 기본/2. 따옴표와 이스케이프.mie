■ 2. 따옴표

◎ 참조
  - <link path="https://mug896.github.io/bash-shell/quotes.html" contents="Quotes"/>

◎ 따옴표
  - 쉘에서 두번째로 중요한 개념은 따옴표이다. 쉘에서 따옴표는 자료형을 구분하기 위해 사용하지 않으며 (모든 값은 문자열로 취급한다.) 다음과 같은 목적으로 사용한다.
    - 공백으로 분리되는 문자열 여러개를 하나의 인수로 만들 때
    - 라인 개행이나 둘 이상의 공백을 유지하기 위해
    - 단어분리, globbing 발생을 박기 위해
    - shell 키워드, 메타문자, alias와 같이 쉘에서 특수 기능을 하는 문자, 단어를 단순히 명령문의 문자열로 만들기 위해
    - 문자 그대로 문자열을 강조하기 위해
  - 최종적으로 명령이 실행될 때는 따옴표가 제거된 후에 인수가 전달된다.

◎ 특수 기능을 갖는 문자
  - 다음 세 문자는 쉘 메타문자로 명령행 상에서 특수한 기능을 가진다.
    - $: 매개변수 확장, 산술 확장, 명령 치환에 사용
    - `: 명령 치환에 사용 (백틱, backtick)
    - !: history 확장에 사용 (프롬프트 상에서만)
    - 등등
  
  - 특수기능을 갖는 문자나 단어를 escape할 때는 '\' 문자를 사용할 수도 있고 따옴표를 사용할 수도 있다.
  - 마지막에 '\'를 붙이고 개행하면 \newline과 같이 되어 newline이 이스케이프되며 기능을 상실한다. 이를 backslash-newline이라고 한다.

◎ 쌍따옴표("")
  - 쌍따옴표 안에서 $,`,! 특수기능을 하는 문자는 해석해서 실행하며, 공백과 개행을 유지한다.
  - 변수 사용시에도 동일하게 적용되며 쌍따옴표를 사용하지 않으면 공백과 개행이 유지되지 않는다.
  - 쌍따옴표에서 백슬래시(\)로 이스케이프할 수 있는 문자는 ",$,`,\,newline이다.
  - 쌍따옴표는 배열과 관련해 특수한 기능이 있다.
    - ${arr[@]}와 ${arr[*]}의 값은 같다.
    - "${arr[@]}"는 "${arr[0]}" "${arr[1]}" "${arr[2]}" ...와 같다.
    - "${arr[*]}"는 "${arr[0]}X${arr[1]}X${arr[2]}..."와 같다. 여기서 X는 $IFS 변수값의 첫번째 문자를 나타낸다.
    - "$@", "$*"에도 동일하게 적용된다.
  - 변수값이 null("")일 때, 변수를 쌍따옴표로 감싸지 않으면 명령문에 아예 포함되지 않고, 쌍따옴표로 감싸면 명령문에 빈 문자열로 포함된다.
    - null 변수를 쌍따옴표로 감싸면 더 명확한 오류메세지를 출력받을 수 있다.

◎ 홑따옴표('')
  - 별다른 기능 없이 모든 문자를 '있는 그대로' 표시한다. 이스케이프도 통하지 않는다.
  - 홑따옴표 문자열에서 홑따옴표를 사용하고 싶다면, 문자열을 둘로 쪼갠 뒤, 사이에 \'나 "'"를 넣으면 된다.
  - 홑따옴표를 사용하는 경우는 다음과 같다.
    - 명령문 작성: 명령문을 인수로 넘기거나 trap 핸들러를 작성할 때, 변수식을 있는 그대로 넣기 위해 사용한다.
    - 프롬프트 설정: 역시 변수식을 있는 그대로 넣기 위해 사용한다.
  - $''는 ''와 같지만 이스케이프 문자를 사용할 수 있다

◎ 추가
  - printf 명령에서 %q 지정자는 이스케이프 문자(공백문자, glob문자 quotes 등)을 다른 명령으로 전달할 수 있게 escape해준다. 
    - 예: printf "%q" "$(echo -e "foo ?*[]" 명령 시 "foo\ \?\*\[\]"로 출력
  - 따옴표를 분리해 작성하면 중간의 공백은 하나의 space로 변한다.
  - 따옴표를 공백을 두지 않고 서로 붙이면 하나의 인수가 된다. 이를 이용해 쌍따옴표의 기능과 홑따옴표의 기능을 번갈아가며 사용할 수가 있다.

◎ 이스케이프 문자 목록
  - 이스케이프 문자는 다음 경우에 처리된다.
    - echo -e "" or ''
    - $''
    - printf "" or ''
    - printf %b

  - 모든 경우에 동일하게 처리되지 않고 조금씩 다르게 처리된다.
    - {이스케이프 문자, 대응하는 문자, 적용}
    ---
    - {\\, 백슬래시, *}
    - {\a, 알림소리, *}
    - {\b, 백스페이스, *}
    - {\e, 이스케이프(ASCII 033), *}
    - {\f, 폼 피드, *}
    - {\n, 개행 문자, *}
    - {\r, 캐리지 리턴, *}
    - {\t, 수평 탭, *}
    - {\h, 수직 탭, *}
    - {\', 홑따옴표, printf와 $''}
    - {\", 쌍따옴표, printf와 $''}
    - {\?, 물음표, printf와 $''}
    - {\nnn, 8비트 문자로 n은 8진수이다 (1~3개), printf와 $''}
    - {\0nnn, 8비트 문자로 n은 8진수이다. (1~3개), echo}
    - {\xHHH, 8비트 문자로 H는 16진수이다. (1~2개), *}
    - {\uHHHH, 유니코드 문자로 H는 16진수이다. (1~4개), *}
    - {\UHHHHHHHH, 유니코드 문자로 H는 16진수이다. (1~8개), *}
    - {\c, 이후의 문자는 출력에서 제외한다, echo}
    - {\cx, CTRL-x 문자, 가령 $'\cz'는 CTRL-Z, $''}
  
  - (sh에서는 echo 명령을 사용할 때 기본적으로 "",'' 모두 이스케이프 처리가 된다.)
  - (sh에서는 echo, printf 문에서 16진수 형식을 사용할 수 없다. 그러므로 sh, bash에서 공통적으로 사용하려면 8진수 형식을 사용해야 한다.)
